<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[从零开始的PCA（主要成分分析）教程]]></title>
    <url>%2F2017%2F07%2F01%2F%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84PCA%EF%BC%88%E4%B8%BB%E8%A6%81%E6%88%90%E5%88%86%E5%88%86%E6%9E%90%EF%BC%89%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言（阅读指南） 我准备写一个轻松的PCA算法的教程。传说中的零基础教程，也就是不用带特别多脑子去阅读的教程。不过有很好线性代数基础的同学可能会觉得我有点啰嗦。那些超级简单的内容请跳过去就好啦。 问题出发：如何给数据降维 现在我们都知道，PCA（主要成分分析）是一种可以把高纬度的数据降低到低纬的一种降维算法。他的英文全称Principal components analysis。当然你肯定不在乎，全称。我们知道在进行学习机器学习或者流形学习中，样本数据的特征值可能多到可怕(当然有的时候纬度太少可能啥也做不了)，那么这个时候做算法的科学家们就不开心了，这么多纬的样本数据老子玩不来啊。这尼玛算法收敛要几年啊，cpu吃不消。我就一台xp的PC，宝宝心里苦啊。 于是这群傲娇的科学家，就在思考这样一个问题，可以给数据降维吗？ 从经验中思考 辛辛苦苦发掘的特征值，你说降维就给我删除了，那怎么行呢？降维要基本法的。可以这样的规律是什么呢？我们先举一个有意思的例子，我要使用纯色的小球体模拟三维空间中的实体，我给出一组采样特征值你看看那个可以不要。（不要考虑这个想法有什么应用，我随便想的） 1(颜色rgb，灰度值，半径,球体表面积，球心坐标，球体密度分布，球体质量) “你给的特征啥子鬼呦！”知道了颜色的rgb不就可以模拟出他的灰度值吗！知道了半径，不就知道了表面积吗！知道了半径和密集分布不就知道了质量了吗！…… 等下！我们刚才的过程不就是一种降维吗！这里科学家有这更加深刻的体悟（一套自己的话语体系），他们使用什么词汇来描述呢？线性相关性。如果两个特征值的线性相关性越强，那么我们就越有把握把两个特征合并成一个特征。 那么从反面来看这个问题，我们要使降维后的数据越线性不相关越好，因为这样可以保留最多的源数据的信息。 你或许会开始问一个严肃的问题：怎么取衡量降维后的数据的线性相关程度？我们有数学工具方差。也就是说我们要使降维后的数据方差最大。 还记得方差吗？请先回忆起期望。一组数据的期望可以看成他们的平均值，然后方差可以反映数据到这个平均值的波动情况。现在我们要做的就是让这个波动保持最大。 从简单开始：二维到一维 那么我们不妨把先看看数据从二维下降到一维的情况。 我们的思路是这样的，在平面内过数据的中心点画一条直线，然后让数据向这条直线上投影，可以知道每个点的投影到中心点的距离，使用者个距离作为每个数据的新的坐标。这样就从二维下降到一维了。而且我们也可以计算这里新数据的方差了。 对于m个点的数据中心值，就是各个特征的平局值\frac{1}{m}\sum_{i=1}^m x_i 可是这样的话，计算有点复杂。我们对数据进行一波预处理，把他的中心点移动到原点。（这个过程叫做特征方差归一，或者均值归0化）这样做的好处是现在过原点做任何一条直线，现在投影到这个条直线上的新数据的均值（期望）是0了。这样计算就简单了许多。 如果用图像表示就像下面这样: 推广到高纬度 聪明的你发现了，在三维中我先移动中心点，然后在选取两条过原点的直线做投影就可以啦。那么从a维度下降到b维度，就可以都这么做了。 公式推导 现在有m个样本数据，每个数据有n个特征，即源数据维度为n维。现在要将数据下降到d维度。假设现在数据已经被我们均值化了，就是中心点已经移动到了原点。现在对我们来说最重要的就是求得出使新数据方差最大的那条直线的单位方向向量。（因为肯定过原点了嘛） 于是乎我们做投影表示数这当中一天直线上投影数据的方差。如下图。 其中$ x^{(i)} $表示的是第i个元素。 现在不难得出方差:(一会就知道我为什么要使用符号 $ \lambda $) \lambda = \frac{1}{m} \sum_{i=1}^m \big( {x^{(i)}}^T u \big)^2 在这里我们可以发现： {x^{(i)}}^T u = u^T x^{(i)} 现在仅仅把平方中的一个换成另外一个整理后就可以得到下面的公式了： \lambda = u^T \bigg( \frac{1}{m}\sum_{i=1}{m} x^{(i)}{x^{(i)}}^T \bigg) u 中间那个大括号里面的是不是很熟悉呢？那现在我这样写呢： cov(X,X) = \frac{1}{m}\sum_{i=1}{m} (x^{(i)}-0)(x^{(i)-0})^T 哈哈现在发现了吧，由于我们移动了中心点，E（X）=0；那么原来公式中的大括号中的就是元素数据的本征协方差矩阵。注意这个矩阵是可以求的（而且是方阵）。现在我们令这一大坨为$ \sum $ 然后我们等式两边都去左乘u,然后就会得到： u\lambda = uu^T\sum u 由于u是单位方向向量，那么$uu^T=1$于是乎： u\lambda = \sum u石破天惊 看到上面的式子，真有一种石破天惊的感觉。我查一定哎呀的叫起来。这个不就是矩阵的特征值和特征向量吗！方差就是特征值，方向矩阵就是特征向量。更加诡异的来了。由于特征值的定义，这里面的特征向量是相互正交的。也就是说： 我们得到了一组符合条件的正交基 不知道你还有没有印象了。线性代数中正交变换，可以使用过渡矩阵，仅仅做一次矩阵间乘法就可以了。现在为了保证方差最大，我们仅仅要对得到的方差进行排序。然后降到几位就取前几个作为正交基就可以了。 到了这里没有什么好讲的了，都是线性代数书上已经写的很好的东西了。 后记 注意这里面降维后的数据，保留了一定的源数据信息，但是现在不能说原来的某个特征就到了某个新的维度上，仅仅是点有一对一的关系。 PCA算法可以说是出奇的优雅，核心思想过程很简单，推导也不需要很高的数学基础，不过要是没有学习过线性代数的话，不会突然有震撼感。真不知道，算法作者到底是从正交基想到了可以去降维，还是通透想要降维，推导到了线性代数里的正交基呢。也可能是两个思路同时进行，突然有一天一切都联通了。神奇了。 当然，最大方差不是唯一的解释这个算法的思路还有其他的解释。欢迎补充交流，指正错误 我将一直迷惑和无知，我是黄油香蕉君，再见]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>PCA</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的基因]]></title>
    <url>%2F2017%2F06%2F30%2F%E6%88%91%E7%9A%84%E5%9F%BA%E5%9B%A0%2F</url>
    <content type="text"><![CDATA[前言 我知道我的人生到了最最迷惑的地方。如今我必须整理回顾自己所面临的种种可能，虽然看似没有必要。 上大学之前：热爱文学的少年 如果你问年少时的我，我将来可能从事的职业。我会毫不犹豫的回答是人们教师。因为这个和我的信仰有关。 关于人活着的意义，我曾经是有认真思考过的。我曾经认为是传承。是将自己的思想阅历和知识，传给下一代人。因为我曾经绝望的认为很多问题是我们这一代人所解决不了的。于是在放弃的时候，选择了有希望的一种。希望我可以告诉别人什么是人生。我是一个常常把人类这个词放在嘴边的人。写文章写小说也是，不喜欢使用表明了时代文化的事物，比如使用啤酒而不会写什么青岛纯生之类的。因为我曾经自负的认为自己的文字是站在更加长远的角度上去写的。等到后人读到我的文字时，这个两个品牌早就不存在了。 我那是喜欢读书，都是认为高雅的书才去读。我不知道什么时候养成了的极其虚伪的阅读习惯。网络文学，和爽文几乎书不会碰的。这并不是说我真的高雅了，但也没有说我是低俗的。这是我的一个重要的问题，我一会再说。我之所以喜欢读书，看诗是因为，我超乎常人的脑洞能力。我常常可以看出书中文学所带来的超越生活的可能性。于是不知不觉的，发现生活的平庸。当然归根结底是我自己的平庸，只不过那个时候没有发现那一点。如果谈起我人生的种种改变，可以总结为一句话就是对平庸的抗争。 于是我逃到了书里的世界中，逃到了那些看似不平庸的文字里。我开始写小说，写散文，写诗写歌。不知算不算思想奇葩，我早就发现了生活中无意义的循环。并不是身边的朋友不好，而是我难以在那种生活了获得心灵的安慰感。于是我就游走在一种人类生活常态和一种出世清高的矛盾之中。这常常使我陷入尴尬的境地。更加令我尴尬的是，这样的我本来应该是个一成熟的，或者说是早熟的人，但是自己也知道自己出奇的幼稚。不过时至今日，我反而很承认自己的这种幼稚了。 我没有认真的生活，只是把看书当成了生活。然后出现了我人生中第一大悖论。那就是爱情。从书中经验，看到的爱情的样子，于是在常年的暗恋中暗示自己，自己有喜欢的人是一件美好的事。拥有完美爱情幻想是使自己在平庸下唯一不平庸的原因。这逻辑说不通对不对，可是一提到爱情，便不需要讲逻辑。这才是我生命中爱情诡异的地方。我试图用喜欢一个人来告诉自己不平庸。这个似乎没有什么问题。但是，曾经的我，似乎重来没有想过，词汇之下，男女朋友或者相处是怎么回事。于是乎，我仍然在自我欺骗中，安详度日。 可是我不愿意否定那段时间。原因是我要自己去定义它，没有人比我更有权力去定义。所以关于爱情是什么样子也是要我自己去寻找吧。 于是乎情爱的内心波动占据了我少年时代的大部分时光，其他时候，不过随波逐流。从来没有想过自己要变的优秀，因为实际上那时没有追求过任何一个人，所以不知道优秀才能被喜欢的朴实道理。以为自己不平凡就可以被喜欢，然后觉得有这么一个人可以看到你内心的世界理解你对于生命中矛盾的挣扎。选择相信和等待，都是一种任性的行为。 不过~~哈哈哈哈。还是要挣扎，这种感觉很微妙。 大学之后，辩论使我学会的 我很少做内心最深处，对自己进行严厉的拷问。我总是不敢想的透彻。想的多了往往是悲观的答案。于是我告诉自己一个原理，如今得出的答案的原因是因为自己认知不够。没有经历过生活，于是乎得出悲观的结论。只要随着时间的推移自我感受的成长，总会得到“正确的”答案。如今所谓正确不过是自己心里好受罢了。 初中时有一次自己，考虑到了死亡。并且和同学谈起了这个焦虑。忘了他们怎么安慰我的。我思考了很久，甚至失眠。 后来慢慢发现，累了就不会考虑这个问题了。和别人待在一起，就不会问这个问题了。 很遗憾，现在要讨论大学里的事，虽然过去时间不是特别的长。大学里对我影响最大的一项活动就是辩论了。当初之所以参加是觉得很适合自己。因为自己的思想中充满了矛盾。后来渐渐的对辩论本身有了一些自己的看法。这些按下不表。直接说说我在这个过程中学到的有趣的东西。 大学还是恋爱最好。 哈哈哈。这里说的是我关注的东西的转变。原来是通过书本看的文学的东西。后来大量的接触到的是社会科学的东西。还有心理学等等。于是心理之中渐渐产生了一定变化。是觉得自己变的卑微了。变的什么都不懂了，发现了自己的无知。然后是恐惧，对这个充满了无规律世界的恐惧。然后是对自己追求精神世界的疑问。于是第一次有这样的问题。我，要什么？ 我 ，要什么？ 我要意义。对！我希望我身边的一切都是有意义的。无论过程，无论结果。这是我拒绝平庸的一种平庸的方式。 但是这个概念太模糊了，并不能指导我自己去做什么。我只知道自己要与众生太同，但是还有隐藏好自己，免得被发现是个异类。这太难了。“一个人知道自己为什么而活，就可以忍受任何一种生活”。于是我曾经觉得，让其他人脱离社会中无意义的人生，有去追求自我的能力是最崇高的事业。曾经觉得可以奉献自己的一生的时间去思考答案。 可是我后来放弃了。原因很简单，不是每个人的人生都值得我去奋斗。不是我自私了，而是觉得人群很可怕，不屑于改变他们了。于是，我开始寻找了自我实现的价值。 讲道理，寻找的过程，无异于碰运气。或者说我开始尝试去理解我不曾理解的东西。可是效果不是特别的好。我在人文和社会科学中开始看的了可怕的不确定性。于是有逃到，自然科学和深奥理论的观察之中。 然后，在各种理论中发现了神性。这个过程，几乎使我放弃了唯物主义的基本思想。 我，就是神。神，就是我 现在说这句话，不是什么年少轻狂，或者自负的表现。而是怀着，深深不可知的神秘主义感的，淡淡感慨。原来“解救之道，就在其中”。 无神论者，使用过一个逻辑上的悖论来，证明神不存在。“神可以创造出一块他自己都聚不起来的石头吗！”答案是可以的。我来给你证明。 首先是数学。你会问，这和数学有什么关系吗？当然有。我们人，都可以理解数学中的观点，可是数学中的观点超出了我们认知的世界。这样的例子有很多，虽然你会说，数学和其他学科一样，不过是用来改造世界的工具，可是并不是所有的数学都可以这么直观被理解。比如超越数。比自然数都结束之后还要往后的数。首先你要想象一个无穷的过程才行。很神奇不是吗？我们都理解无穷这个词。 然后是音乐，想想，为什么不同波长频率的简谐波，在时间上的排列可以使我们产生情感。悲伤，或者，快乐，你和我两个无法衡量的个体都可以感受到。 每每看到，这些智慧和艺术的结晶。我就会感叹，我要找什么神呢？我就神啊。意义什么的，由我来定义就好了。 于是乎。我可以通过学习，和体悟来获得一些意义。这样就不是平凡或者高雅的问题。是我生命中内心深处的基本的渴望。对未知的渴望。对美的渴望。对自己求知的喜悦，和对自己可以审美，在美上拥有感受的自负。这些骄傲，是我生命中的本质，是像我渴望做爱一样的存在，在我骨子里，随我出生的东西。 但是，我浪费了好多时间。可是我在音乐和数学上很贫庸。你明白吗？这种感觉有点神奇。想想你是很爱花的人，但是却一朵也养不活。你仅仅有的天赋就是看到别人的天赋。那么是有点点孤独的感觉。 不过还好。神是我。我可以改变。可以去追求，去实现。可以看，可以去感悟。然后热泪盈眶。可以被别人误解，然后嘲笑，那群人。 然后，回归平凡。然后选择，平庸。对~ 我要坐穿平庸。]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>自我介绍</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[脑子是个好东西-证明R（3，3）=6]]></title>
    <url>%2F2017%2F06%2F28%2F%E8%84%91%E5%AD%90%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B8%9C%E8%A5%BF-%E8%AF%81%E6%98%8ER%EF%BC%883%EF%BC%8C3%EF%BC%89-6%2F</url>
    <content type="text"><![CDATA[前言 人类的智慧是无限的。当我看到了下面的证明之后我相信了这一点。希望你也可以体会到我所感受到的震撼。 命题 在6个人的聚会中，一定有三个人互相都认识，或者三个人互相都不认识。 现在想想怎么证明。或许你和我一样一开始想到的是条件概率，贝叶斯公式。这样也不是证明不出来，而是证明的方法显的暴力，和不用脑子。有一种极其优雅的证明。现在验证你是不是天才的时候来了，关掉这个博客，然后思考两天。对比一下你的证明方法。 两天之后 现在我可以解开谜底了。 我们现在来转换一下命题，看看他在等价命题是什么。首先有6个人，我们可以理解为6个ABCDEF。然后每两个人之间的关系使用连线表示，我们规定如果两个人认识，我们使用红线连接，如果两个人不认识使用蓝线连接。现在我们要证明的是6个点互相连线的图像，对边进行红蓝任意的上色，其图形中必然存在一个全色三角形。 好了！现在是不是觉得豁然开朗了呢？请开始你的证明吧。再给自己两天时间如果证明不出来，再来看看下面的结果。 又两天之后 证明: 现在考虑一个点和其他剩下5个点的关系。根据抽屉原理这5个点中必然有3个的边是同样颜色的。（关于这个你可以自己动手试试，或者试着推导，还可以百度哦！）于是我们把这个四个点抽象出来。令他们为abcd。如下如所示： 现在已经知道,ab,ac,ad都是一种颜色的，不妨令它为红。现在看看三角形bcd。发现如果其中一条边是红色的，那么图形中必然有一个全红的三角形。如果全都不是红色的，bcd就是一个全蓝的三角形。证明完毕！ More 同学，我们似乎是接触到了一门很有趣的知识。拉姆齐定理。这里有维基百科的传送门。这也是为什么我的标题中使用了R(3,3)的原因。 我将一直迷惑与无知，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>看书</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[知行合一Mean-shift实现篇]]></title>
    <url>%2F2017%2F06%2F27%2F%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80Mean-shrift%E5%AE%9E%E7%8E%B0%E7%AF%87%2F</url>
    <content type="text"><![CDATA[前言 度过了理论篇，相信这篇你读起来会轻松很多。本文尝试使用mean shift算法对图像进行降噪。如果你对这个算法还不清楚建议阅读我写的上一篇文章。 环境和依赖 mac或者linux系统（win平台没有测试） g++ 和 cmake openCV cmake：这里有一个不错的传送门更多的内容请百度.openCV 的安装和下载请看传送门更多其他平台内容请百度。 直接看代码：主文件设置成了test.cpp。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;highgui.h&gt;#include &lt;cv.h&gt;#include &lt;iostream&gt;#include &lt;stdlib.h&gt;#include &lt;math.h&gt;using namespace cv;using namespace std;//获取某个点的收敛距离int getNewZ(Vec3f v1);//获取两个点间的距离float getDistance(Vec3f v1,Vec3f v2);// 启点 终点 =》 终点减起点Vec3f getNewVec(Vec3f v1,Vec3f v2);//计算两个向量的和Vec3f vecAdd(Vec3f v1,Vec3f v2);//获取一个点的平局向量Vec3f getargvec(Vec3f v);//多维球体半径 实验结果这个数字越大 图像越平滑float h = 10.0;//最终 收敛条件float m = 0.1;Mat src,dist;// 这里面的参数是图片地址int main(int argc,char ** argv) &#123; src = imread(argv[1],CV_LOAD_IMAGE_GRAYSCALE);//其实这里的取灰度图不是特别有必要了这里图片已经是Vec3b的三维量了。 cvNamedWindow("Image_show",1); imshow("Image_show",src); dist = src.clone(); //现在应该使用mean shirft算法对这个图片进行降噪 //对数据结构的测试代码 cout &lt;&lt; dist.channels() &lt;&lt; endl; cout &lt;&lt; dist.rows &lt;&lt; endl &lt;&lt; dist.cols &lt;&lt; endl; //128X128 for(int i=0;i &lt; dist.rows;i++)&#123; //uchar* data = src.ptr&lt;uchar&gt;(i); for(int j=0;j &lt; dist.cols;j++)&#123; Vec3f point = Vec3f((float)i,(float)j,(float)dist.at&lt;uchar&gt;(i,j)); int z = getNewZ(point); //cout &lt;&lt; z&lt;&lt;":"&lt;&lt; (int)dist.at&lt;uchar&gt;(i,j) &lt;&lt; endl; dist.at&lt;uchar&gt;(i,j) = z; // //todo 这里使用算法对dist进行改造 &#125; &#125; // cout&lt;&lt; dist.channels()&lt;&lt;endl; //把新图片打印出来 cvNamedWindow("new_Image",1); imshow("new_Image",dist); //保证程序不关闭 waitKey(0); return 0; &#125;float getDistance(Vec3f v1,Vec3f v2)&#123; float sum = pow(v1[0]-v2[0],2)+pow(v1[1]-v2[1],2)+pow(v1[2]-v2[2],2); //cout &lt;&lt; sqrt(sum) &lt;&lt;endl; return sqrt(sum);&#125;// 启点 终点 =》 终点减起点Vec3f getNewVec(Vec3f v1,Vec3f v2)&#123; return Vec3f(v2[0]-v1[0],v2[1]-v1[1],v2[2]-v1[2]);&#125;//计算两个向量的和Vec3f vecAdd(Vec3f v1,Vec3f v2)&#123; return Vec3f(v1[0]+v2[0],v1[1]+v2[1],v1[2]+v2[2]);&#125;int getNewZ(Vec3f v1)&#123; //根据 src h 确定 出循环查询的范围 //计算范围内点的 “平局向量的值” Vec3f argV,newV; argV = getargvec(v1); //使用m判断收敛条件 newV = vecAdd(v1,argV); if(getDistance(argV,Vec3f(0,0,0)) &lt;= m)&#123; return (int)newV[2]; &#125; //产生新的 递归 return getNewZ(newV);&#125;Vec3f getargvec(Vec3f v)&#123; //通过v 判断循环范围 floor 向下取整 ceil 向上取整 int x_start,x_end,y_start,y_end; x_start = v[0]-h &gt; 0 ? ceil(v[0]-h) : 0; x_end = v[0]+h &lt; src.rows ? floor(v[0]+h) : src.rows; y_start = v[1]-h &gt; 0 ? ceil(v[1]-h) : 0; y_end = v[1]+h &lt; src.cols ? floor(v[1]+h) : src.cols; //循环时使用 src 原始数据 Vec3f tmp = v; int k = 0; v = getNewVec(v,v); for(int i=x_start;i&lt;x_end;i++)&#123; for(int j=y_start;j&lt;y_end;j++)&#123; //现在判断这个点是不是在范围内 然后累加求和 Vec3f end_point = Vec3f(float(i),float(j),(float)src.at&lt;uchar&gt;(i,j)); Vec3f tmp2 = getNewVec(tmp,end_point); if(getDistance(Vec3f(0,0,0),tmp2) &lt;= h)&#123; //todo 这里的平均向量计算有问题 k++; v = vecAdd(v,tmp2); &#125; &#125; &#125; //偏移向量进行 衰减 if(k!=0)&#123; v = Vec3f(v[0]/(float)k,v[1]/(float)k,v[2]/(float)k); &#125; return v;&#125; 为了方便我先把cmake的配置文件先送上。一会在对代码进行解释。CMakeLists.txt如下： 123456789cmake_minimum_required(VERSION 2.8)PROJECT(Test) FIND_PACKAGE( OpenCV REQUIRED )INCLUDE_DIRECTORIES( $&#123;ShowImage_SOURCE_DIR&#125; )ADD_EXECUTABLE(Test test.cpp) TARGET_LINK_LIBRARIES (Test $&#123;OpenCV_LIBS&#125; ) 代码解释 要是看过之前理论篇的同学，不难理解，我要实现的的核函数对每个点的加权是一样的，没有越近就越大越远就越小。然后也没有使用自适应的步长。 我的大体思路是使用mean shift算法计算每个素点的收敛的值作为这个点新的灰度。这里面没有什么复杂的逻辑，所以很好理解。这里圆内判断条件，我进行了一定的优化使用正方形代替了圆进行计算。减少了循环的次数。 实验结果 这是我写的源代码git的传送门。欢迎学习的目的使用。:） 我将一直迷惑和无知，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>mean-shift</tag>
        <tag>c/c++</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[知行合一Mean-shift算法理论篇]]></title>
    <url>%2F2017%2F06%2F25%2F%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80Mean-shrift%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E7%AF%87%2F</url>
    <content type="text"><![CDATA[总前言 以前在自学机器学习的时候，只是简单的看了一下思路然后就是跟着进行数学推到。至于从算法到实际实现总是存在一些距离。于是就有了自己写这样一系列文章的想法。就是把自己从知识到实践的过程记录下来。思考出一条从理论到实践的路径。这一直都是我非常想研究的。一篇文章或许看不出什么，不过我相信只要坚持这种工作，一定可以得出令人欣喜的答案来的。 简介 Mean shift 中文译名又叫做，均值漂移。在机器学习领域可以实现聚类，在图像领域可以实现目标追踪，和图像平滑。是一种应用很广的算法。接下来我将尝试使用通俗的语言，在不借助数学工具的情况下使你了解这个算法都做了什么。 算法思想二维空间 首先我们先假设一个任务。我们给出平面中的一组点，然后要求你根据这些点的信息，将空间分割开来。怎么分割呢？如果给你一只铅笔，你或许可以把这些点想象成天空中的星星，有的地方很密集，有的地方和稀疏，有的像星云的一部分，有的又像银河之类的一个尾巴。你可能凭感觉画出来了。但是这样的工作可以由机器自动完成吗？ 答案是可以，我们选取平面内的任意一个点，看看他周围已经存在的数据对这个点的影响是什么。然后通过这个影响移动这个点。然后在进行迭代，就可以得出这个点收敛的数据了。(收敛的条件当然是这个影响趋近与0) 额。听起来还是很抽象？看看下面的图片你就明白了。 首先先随便选取一个点X，然后画一个半径为h的圆。之后求在这个圆中(圆形内部)的点到X所构成的向量的和。我们称之为平均向量。 之后对X在平均向量上的方向和距离上进行平移。得到新的X。然后重复这个步骤。一直到它附近的点的平均向量为0，或者长度足够小。（小于我们设定的值） 注意,这个时候，如果你是要分割平面，你要想象许多的点，把平面内的位置都覆盖了，你会发现最后所有的点也就只收敛于几种值。如果你要对已经有了的点进行聚类，那么你就只需要把要分类（实际是聚类）的点都进行一次计算就可以了。（这里有个小技巧，理论上在计算过程中所有经过的点，和包裹到的周围的点都可以认为是一个类别里的，这样在一些时候可以大大减少计算的量。） 三维空间 如果二维空间内的点的移动方法和规律你已经理解了，那么不难推广到三维的空间中。这里只要把原来用于圈住周围点的圆，变为球体就可以了。下面我给你看一张在mean shirt论文里面在三维空间进行聚类的结果图。 怎样很神奇吧，这些3维空间中的点被分为了三类。现在闭上眼睛好好想象一下，这些点不断的画球移动然后停在一个点的过程。 推广到高维 和刚才过程一致。现在把球体，改成超球体即可。什么是超球体呢？你可以理解为无论从那个维度对他进行投影都是一个圆就可以了。不用强迫自己完全想象出来。 这里的描述不够准确，应该是说投影到任意的二维空间中是一个圆。投影到任意三维空间是球体。感谢。@申波同学的帮助。 公式推导 或许你觉得低维度下，很好思考和实现，但是数学家们，或者玩算法的人希望自己的算法是万能的。于是我们要借助数学工具对算法进行推导，和重新表述。不要害怕!这个和我刚才说的，并没有多大的不同。现在你要做的就是理解，每一个步骤，然后在不懂的地方停下来思考一下就行了。 基本形式 在给定的 $ d $ 维的空间 $ R^{d} $ 中有 $ n $ 个样本点。这样不难得出在空间中任意一个点的Mean shrift向量如下： M_h = \frac{1}{K} \sum_{x_i \in S_k} (x_i - x) 简单的解释一下这个公式。$ K $是指的是$ x $有$ K $个临近点。其中超球体$ S_k $的半径为$ h $,它的公式表示如下: S_h = \{ y:(y-x_i)_T(y-x_i) < h^2 \}使用核函数进行密度估计 首先我把这个密度估计的函数给出来:(注意这里面$ K() $是核函数) f(x) = \frac{1}{nh^d}\sum_{i=1}^nK(\frac{x-x_i}{h}) 你或许会问这个是什么玩意？我为啥要密度估计？还有你为啥知道密度估计是这公式呢？ 现在我们开始以二维的数据进行思考。想象一下一个平面上面有许多的点我们可以用(x,y)来表示。现在我们要通过平面内现有的点的疏密来获取平面上每个点的密度值。于是原来的（x,y）变成了（x,y,z）。他是一个表示平面内每一个点密度的曲面。就像下面这个图一样。 看到了这个密度曲线你是不是豁然开朗了。如果你还没有感觉，不妨想象一下把左边的那个“小山脉”倒置过来，就成了一个小漏斗。现在吧一个小球放在任意一个点上，小球滚动后，必然的停止在一个“小山”的“顶峰”。这就是模拟了上面“向量漂移”的动作。（使用模仿这个词不太恰当）哦!现在对这个密度函数求偏导数，然后命令其等于0就可以知道哪里是“山峰”了，因为“山峰”是平的。(偏导数应该为0) “等等，不要蒙我！”你或许会说。这里没有解释两点，1.为什么原来的点是离散的，现在就变成连续的曲面了呢？2.这里和核函数有什么关系呢？ 好吧。在求取偏导数之前。我来尝试解释一下这个问题，不过这里只不过是我的一种理解方式。首先一个离散的一维的点的密度怎么表示呢？我们知道点在总个数为N。于是我们不妨选取一段很小的距离h，然后看看在这段范围内有多少的点。假设有k个点。于是他的密度可以近似的表示为：$ p = \frac{k}{N} $,想象一下这里面h足够的小，然后我们可以得到这样的图像。 现在再想想$ \frac{k}{N} $是点出现的概率，并不是在真正的密度，思考在二维空间中，真正的密度应该是$ \frac{k}{NV}$ 其中V可以理解为一个以h为边长的正方形。我们便可以说这里的h是窗口的大小。 可是现在表示整个密度的函数似乎太麻烦了。那怎么办呢？我们设想一个辅助函数。让他有下面三个功能： 在窗口内有值，在窗口外没有值。 这个函数表现出离x越近对密度的结果影响越大，越远越小。 函数在各个方向上的影响是一致的。（对称的） 细心的读者或许会发现条件2其实包含了条件1。没有值可以理解为对结果的影响为0。 现在我们就给自己投机取巧的函数起名为K，于是就可以轻易表示出来在二维空间中的密度函数。 f(x) = \frac{1}{nh^2}\sum_{i=1}^nK(\frac{x-x_i}{h}) 这里我关于使用$ \frac{x-x_i}{h} $中的h是这样理解的。这的距离尺度是相对于窗口大小h的距离。而不是绝对距离。这在一维的空间可以理解为距离，而在二维就是一个向量了。所以这里的解释可能存在一定的问题。希望读者，有更好的解释可以，告诉我。谢谢您 :） 怎么样？现在这个公式是不是和之前的很像了。除了这里的是2维的d=2.现在推广到d维，就可以得到我们要的公式了。但是你仍然不满足：“你怎么知道有这样的函数K，正好满足你的种种变态要求呢？”。你别说还真有，而且还很多。 那他们张什么样呢？为什么又这些神奇的功效呢？了解更多请使用传送门。我可以先截一张图，让大家感受一下，这里不做过多的介绍了。 注意 这里有关于核函数的还有:传送门这个是介绍SVM（支持向机）中的核函数。但是我对于核函数的理解还不是很深。希望哪位朋友有相关论文或者文章推荐给我。万分感谢。 开始纯数学推导吧！ 首先要确定核函数的公式。 K(x) = c_{k,d}k(\|x\|^2) 将核函数代入到原来的密度估计公式，然后求梯度得到$ \nabla f(x) $。之后令$ \nabla f(x) = 0 $这是接上面提到的大体的思路。 \nabla f(x) = \frac{2c_{k,d}}{nh^{d+2}}\sum_{i=1}^n(x_i-x)g\big( \big\|\frac{x-x_i}{h}\big\|^2\big) 其中$ g(s) = -k’(s) $。这里来简单的理解一下，注意这里我们求的是密度估计函数的梯度，于是这里反应的是梯度下降的最快方向了。那么我们仔细观察上面这个公式，是不是有点意思了！ \frac{2c_{k,d}}{nh^{d+2}} 不过是一个常数，我们先忽略他。然后看看 \sum_{i=1}^n(x_i-x) 是不是突然想哭出来？这个不就是那个各个点到x的向量和吗！ g\big( \big\|\frac{x-x_i}{h}\big\|^2\big) 一看就更加的亲切了，这个不就保证了在窗口h内有值在窗口h外对梯度下降的影响是零吗！更加神奇的是你发现里x越近的点在对$ (x_i-x) $这个向量的加权越大（特别在高斯核下,在别的核下可能加权是一样的）。 现在回忆一下前文，我是不是说过的“模仿”一词不准确？对，这里是向量的漂移模仿了，梯度函数求极值点的过程。而且正好描述的是在核函数影响下窗口大小h内点权重一致的情况。 现在我们知道了我们要在$ \nabla f(x) $下求极值点。那就可以使用最传统的方法，求出一个点的梯度，然后按照梯度的方向移动一段距离，再继续求梯度。重复这个过程，一直到求出的梯度趋近于0。现在便知道了这个方向是:在窗口h内的点到x所构成的向量的加权和。看看我们终于回到了最初的定义了！ 但是向这个方向移动多少呢？步子迈大了容易扯到蛋（移动过了，然后来回摆动永远不收敛），步子迈小了收敛速度太慢了。那么可不可以让在它在离收敛点远的地方，步子大一点，接近了极值点，步子就小一点呢？ 答案是：当然可以！ 自适应步长 我们在来回顾一下，这个公式。请始终记住他表示的是密度函数的梯度。下降最快的方向。 \nabla f(x) = \frac{2c_{k,d}}{nh^{d+2}}\sum_{i=1}^n(x_i-x)g\big( \big\|\frac{x-x_i}{h}\big\|^2\big) 现在对这个公式进行一定的整理。后得到： \nabla f(x) = \frac{2c_{k,d}}{nh_{d+2}} \bigg[ \sum_{i=1}^n g \bigg( \bigg\|\frac{x-x_i}{h}\bigg\|^2\bigg) \bigg] \bigg[ \frac{\sum_{i=1}^n x_i g\big( \big\| \frac{x-x_i}{h}\big\|^2\big)}{\sum_{i=1}^n g\big( \big\| \frac{x-x_i}{h}\big\|^2\big)}-x \bigg] 没看出来怎么推导出这部的同学请来看 ： 关于这个公式很多的同学表示很头大，但是如果你看完我的介绍，可能会吐血哭出来。这个就是简单的分数运算。首先把$ x-x_i $和后面的一大坨乘开。然后在每一项在除以那一大坨。在外面乘以那一大坨。就是这个公式了。 关键的地方来了。注意理解这个公式。现在我们令$ G(x) = c_{g,d}g(| x |^2)$,那么这时第二项，就变成了对于新核函数G(x)进行的密度估计。好！停下来思考两秒钟。 那么这个第二项就是一个大于0的数了。于是乎我们令第三项为$m_h$。仔细思考一下这个$m_h$就是我们要的自适应的步长。 m_h(x) = \frac{\sum_{i=1}^n x_i g\big( \big\| \frac{x-x_i}{h}\big\|^2\big)}{\sum_{i=1}^n g\big( \big\| \frac{x-x_i}{h}\big\|^2\big)}-x 思考一下你会发现，由于第一项和第二项是一个数不对这个梯度变为0提供贡献，所以这一项可以提供梯度下降的方向。然后我们看到 \sum_{i=1}^n g\big( \big\| \frac{x-x_i}{h}\big\|^2\big) 是核函数密度的估计，以高斯核为例，这里原来的密度估计完全一致。也就是说，这里的$m_h$和原来的密度估计成反比，这样就做到了密度大的地方，他的倒数就小。密度小的地方他的倒数就大。 于是反应到步长上就是，离模点（极值点）远的地方，步长大，近的地方步长小。 x' = x + m_h(x) 这个就是可以使用算法迭代的最终公式。顺便提一句这里$m_h$就是人们口中的mean shift向量了。 写在最后 终于完成了。不知道你理解了没有。我没有读过研究生，或有专业老师的指导，如果有什么错误，欢迎指正。感谢你的阅读。 我将一直的迷惑和无知，我黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>mean-shift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新的开始]]></title>
    <url>%2F2017%2F06%2F23%2F%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[新的开始我决定使用hexo开始新的博客整理。虽然可以开始很大的工作是整理以前的博客进行很多的迁移。 测试测试图片 测试公式e^{it} = cost + sinit测试代码1234#include &lt;stdio.h&gt;void main()&#123; print("Hello Wrold!");&#125;]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拾遗录14]]></title>
    <url>%2F2017%2F05%2F29%2F%E6%8B%BE%E9%81%97%E5%BD%9514%2F</url>
    <content type="text"><![CDATA[写在前面 来看看从来没有谈过恋爱的人，写的分手诗。看来，想象力最重要了。 诗 曾经 曾经的曾经 我们似乎在一起 我微笑的脸 看你静静的睡去 伤心的时候 你哭红了鼻 为你逝去泪水 给你取暖的外衣 你美美的眼神 快乐又神秘 开心的舞蹈 欢乐的谜语 不能忘记你 梦里的奶油 都是你 不得不注意 你的喜与怒 小秘密 我们在一起 就这样没有任何说明 就这样的在一起 没有任何约定 我们在一起 共享一件大衣 分享一份甜蜜 你在我的左边 戴上我的眼镜 数天上的繁星 你说你要像月亮一样 永远美丽 我说我就成为天上的一颗星 当你手里的水晶 月光澄澈透明 记录少年的痴情 星辰散乱心情 做最好的证明 曾经的曾经 只不过是曾经 所有的真诚 在一瞬间离去 我努力去牵你苍白的手 你紧缩的手臂打碎了我的心 我留着泪问 为何离去，放弃过去 你不作答语 只是静静消失，留我一个人伤心流涕 曾经是多么美丽 现实让我无语 我曾给你的宽容，你当做撒娇的武器 你留下来的温存，是一种剧毒的药剂 这一切一定是一场游戏 我只不过是一个玩具 那么一切不过一个骗局 爱的越少，痛的越轻 爱~~~~~~ 你到底有没有真谛 爱与被爱者谁有权力 我宁愿永远只是遥远的曾经 我是颗流星 只不过望着月亮 默默的 足矣！]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>拾遗录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[获取知识的方法]]></title>
    <url>%2F2017%2F05%2F18%2F%E8%8E%B7%E5%8F%96%E7%9F%A5%E8%AF%86%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[OverView 在这篇文章中我将讨论获取知识的方法。注意，这里面大部分是我个人经验之谈，既有可以视为理论的东西，也有一些很实际的方法。现在这个阶段我不大乐意与将这两者在文章中分的很细。原因是我没有这个思考的力气。很无耻的理由是吧，我也是这样认为的。所以我将在以后的时候不是直接成文，而是先写一个草稿然后在整理一次的。（注意我也不知道这样做是否有效果） 什么是知识？为什么要获取他 额~关于第一个问题我觉的以我现在的知识没有办法回答你。不过如果你在认真读我的文章，我建议你一直去思考这个问题。然后对照我所说的，如果觉得不适用的，选择性阅读。为什么建议你这样的去阅读呢？因为我自己曾被那些半吊子结论的文章坑苦了。明明结论的正确性不敢用100%的把握（实际上几乎都不能）却言之凿凿。这样就相当于学习了错误的知识，是不可取的。但是不读可能又会失去其中隐含的某种有用的信息，怎么办呢？我的建议是不要太关注这个问题。不然你生活中有太多这样的问题要求解决了。 好了。现在看一眼第二个问题，为什么要去获取知识。既然已经饥不择食到了读我这篇文章，这个问题就显得有些愚蠢了。这仿佛就像在舞台上突然问另外一个演员为什么要表演一样可笑。有什么理由吗？没有。就是一个行为，没有为什么！关心的人想怎么定义都可以。可我想提醒你的是：认真想一下可能某个获取知识的过程就不需要了。这听上去有些难以理解。比如说你正在上网查询女孩子喜欢的口红的品牌，在学习相处的心理学，在思考怎么讲一个让人发笑的笑话。我可怜的朋友，你想获取的不是知识是她的心。然而要知道，没有知识可以描述的。所以我建议你打个电话而已 所以这个问题，正常情况下没有讨论的必要，一旦讨论起来，非要弄个很重大的改变不得。为了保险起见我这里提起，以便于你在获取知识的过程中，可以想一下。嗯，通常就一下下 怎么开始的？ 我先从我的历史讲起。开始我几乎和所有人一样，上学。其实正确的严谨的说从娘胎就开始了。不过我更希望从上学这件事开始说起。 上课，看书，做题，考试反馈。然后以此循环。不得不说，这是一个我能见过比较完成的获取知识的循环了。似乎很完整。不过不就知识获取的范畴而言，可能你会对这样的形式存在某种情感。这件事很有趣，我们对某种形式存在情感和情绪倾向。甚至我在写这段文字的时候都会尽力避免我的情绪对这其描述产生不公正性，可见其中情绪作用的巨大。 但是准确的说，我们那时候怎么开始获取知识的？看书？那我们为什么看书，为什么听课呢？这又是一个无法回忆起的问题。因为我没有什么可靠的印象来表明了。所以关于这部分的归因，我选择放弃。 然后是现在。我从上大学开始后的一段时间的自学开始说起。嗯，很多是与课程无关的东西。有些东西我自己都惊讶于我知道这个有什么用。所以到这里你应该明白了我想讲的是什么了。 怎么满足自己的好奇心。 问题开始，刨根问底 为什么+任何一件事。就是一次探索的开始。但是我往往是从怎样做开始的。而已常常是一个很模糊的想法。 比方说我在思考，如何把我大学的课程表读到我的手机里然后提醒我，或者读取我喜欢的人在社交平台上的信息来判断她对我的态度，在比如有些深奥的问题:我有没有自由的意识。等等~ 这些问题其实我都没有解决过。但是我却可以开始了。你或许会说，开始算什么呢，这没有什么了不起的。我亲爱的朋友都读到这里了，我想请你相信我并没有什么好炫耀的。而且我说的仅仅是开始。那么这里的开始是什么意思呢？那就这个读取课程表来说。我一想到问题就知道应该查阅那些资料来解决。而且这些涉及的领域是很清晰的。 因为课程表在学校的网站上都有，所以要学习简单的web知识，html，cookie什么的。 这里要抓取内容所以需要一点爬虫的知识。要得到准确的内容要了解正则表达式，或者XPath。 因为要在手机端所以要学习Android编程，要学习java。因为要获取html的返回值要了解java 网络请求的东西。 我上面描述的内容在我一听到这个问题的时候就可以想到了，对,这就是我说的开始。只要了解了上面那些知识点就可以完成这个作品，这个开始就在你的想法和实现中间搭了一座桥。可是事实是我们大多数人，在有一个想法后是没有这样一条路的。那么恭喜你了，你将要学习到新的知识了。 拿第二个想法举例，我没先假设自己能获取到你喜欢的女孩的社交数据，比如她和你还有别人的聊天记录什么的。那么怎么判断你和她的关系呢？ 这时你有两条路可以走。一：直接读，看看她是不是和谁说过喜欢我，或者喜欢他人。可是这样做其实可能是徒劳的。因为可能她比较含蓄，没有直接说喜不喜欢什么的。聊天中都是和你一样的平常的内容，日常还有一些笑话。这时你要借助一个已经有了的解释模式来分析，她的语言内容。听上去很怪？其实就是心理学分析了。但是使用怎样的理论分析呢？这时你发现你要学习一点心理学基础知识。 心理学基础知识怎么学？额~问自己认识的学心理学的哥们吧。于是你穿上睡衣拿着电话去天台联系你许久没有联系的老同学，在一阵寒暄过后，你直接切入正题，怎么学心理学。这时他可能惊讶于你的问题“学心理学干嘛？我和你讲很坑的，就业都…………”巴拉巴拉一堆。你自行忽略然后他就开始兴致勃勃的讲起心理学的分支和基本概念。终于讲到了比如“行为主义”，“恋爱心理学分析”等你最想听见的字眼。于是你们聊的很开心，他推荐了一本书开始学习。你买了书发现里面有许多你不懂的词汇。于是你百度，发现了在心理学下包含了“实证主义”哲学和方法论。你沉迷里一段时间回到，心理学上。并开始简单的验证你周围的世界。发现可以使用书中的知识自洽，于是你读完了朋友推荐的教程，不满足于此开始去知网上看更多的论文。 上面是第一条路。现在是第二条。你发现数据量太多了自己读完要花上个两天两夜。你读了她和朋友经常说“嗯”但是和你却常常回复“哦”。天才的你觉得这有问题，却不知道怎么办。你在思考是不是词汇出现频率反应了什么。于是你开始在百度上查询数据分析。于是发现了数据挖掘和大数据这个概念。你读了几篇吹牛的文章，发现都在讨论机器学习和人工智能。于是你开始简单的接触机器学习的概念。你惊喜的发现，这个问题可能是机器学习的一个分类问题，领域有很接近自然语言处理。于是你开始查找要学习的视频，发现了吴恩达老师的网易公开课。于是你开始拿着手机在吃饭上厕所的时间学习。机器学习有很多的数据公式，于是你翻出来高数，线性代数，概率书来。某个深夜你在为自己终于弄懂了马尔科夫链感到惊喜。你学的很努力但是效果甚微，学了很久才学到支持向量机。于是你准备一次实践。额~但是没有样本数据怎么办？我上铺的哥们就不错，要不我先介绍给她做男朋友，这样数据就有了。嗯没毛病。 这种情况下由于问题涉及一个更深的领域无法马上解决，但是却可以学习到跟多的东西。但是还有种情况如我最后一个例子:自由意识是否可能。这个似乎是一个哲学问题，就更加缥缈了。只能每天想着，偶尔有了关联在进行关联性的思考。比如了解到了拉普拉斯妖，然后发现可以证明其不存在。然后发现了量子力学的一些性质。然后就思考到意识和物质的问题。又回到了本源论，于是要思考可知论与不可知论。终于到了神性和人性上面来。这些都可以百度。但是思考在这种问题下终于程度很高~ 我想说什么 现在我想说的是，这个过程很有趣，可是很孤独。而且由于没有很好基础知识很容易走弯路。 所以我在问，学习的本质是什么？知行？]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>看书</tag>
        <tag>思想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[荒原]]></title>
    <url>%2F2017%2F05%2F11%2F%E8%8D%92%E5%8E%9F%2F</url>
    <content type="text"><![CDATA[没有用的前言 去年过年回家，哈尔滨下的飞机，做大巴回的大庆。没想到那时我竟然有这么有趣的文章。 荒原 那是我在回家过年的路上。在哈尔滨到大庆的高速公路两边，有一片荒原。我叫他哈大荒原。 在视线里荒原一直蔓延，似乎没有尽头。白色的雪，黑色的霾，远处淡紫色的天上，一颗冬日之阳在下降。我坐在大巴车里，寻找荒原中活着的生物。一排排整齐的杨树，一排排从我眼前飞过。树干笔直不牵连，树枝交叉在一起，偶尔还有鸟窝。 冬阳继续下降，像是燃烧殆尽的火星，在空中缓慢下落。我能想象它沉到雪中熄灭的声音。是啊。荒原熄灭一切，不留情面。一眼望去是，是被雪掩埋的希望。荒原是静谧的，是神秘的，是绝望的。望着荒原就是望着绝望。 它无声息的带走看着他的人的希望。我数不出来，在荒原上北风吹灭了多少的热情。有没有旅人走到这里就回头了？这里是“吃人”荒原，偶尔可以看到坟头和花圈。这就是我生活在北方的荒原。我想象着走在这个荒原了的样子。我害怕我我无论要走多远，都要回到原点。因为它就是这样冷峻的，不动声色的见证着一切。他仿佛又一种神秘的力量吸引着我的注视。就好像有一天我会踏上这个荒原。然后陷在里面，在明年的开春变成一朵小黄花。之后被羊误食，变成羊粪，被土壤吸收。长出草来，再被野火烧成了灰。被雪掩埋。被人遗忘。 这就是荒原，哈大荒原。离我出生很近的地方。里我生活很远的地方。我好奇的地方，我恐惧的地方。危险的荒原，安静的荒原。 那晚我做梦了。梦见一匹火红色的马，在荒原奔驰。]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis教程]]></title>
    <url>%2F2017%2F05%2F08%2FRedis%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[OverView正文。 小贴士：这里将对正文中的某些词汇进行解释。 扩展： 这里是作者建议的内容，和编程方面的延伸。可以跳过阅读。 示例：这里是帮助读者理解而写的示例。 注意 提示读者需要注意的事项。 理论篇什么是Redis？[1] REmote DIctionary Server(Redis) 是一个由SalvatoreSanfilippo写的key-value(键值对)存储系统。 Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。[详细见表一]它通常被称为数据结构服务器，因为值（value）可以是字符串(String), 哈希(Map), 列表(list), 集合(sets) 和有序集合(sorted sets)等类型。 小贴士：[2]Redis中的数据类型哈希（Map hashmap）：散列表（Hash table，也叫哈希表），是根据键（Key）而直接访问在内存存储位置的数据结构。列表（list）：列表是一种数据项构成的有限序列,即按照一定的线性顺序,排列而成的数据项的集合。（redis中使用双向链表实现）集合（sets）：和中学时学习的概念是相似的。特点是集合中元素不能重复是唯一的。切内部是无序的有序集合（sorted sets）：也是一种集合，但是内部数据是经过排序的。 示例： 比如使用json表示： 哈希表：{key1:value1,key2:value2, ... ,keyn:valuen} 在这里的key和value是一一对应的关系，而且是函数关系。也就是说，key1 ... keyn 都是唯一的。 列表：[&#39;a&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;e&#39;]。注意这里的&#39;a&#39;是可以重复的这个在列表中是允许的，而且这里的顺序是不能变的，一旦顺序变了就不是同一个列表了。 集合：{v1,v2, ... ,vn}。这里v1到vn都是唯一的。也就是说{a,a}不是一个集合。这里集合的顺序是无关的，于是{a,b}和{b,a}在概念上可以视为一个集合 有序集合:{1,2,3, ... ,n} 这里1到n当然是不能重复的。其次他中元素是按照某种规则排序的。比如大小等。一旦顺序不一致在其中也不视为同一个有序集合了。 注意 在引用列表中的[2]连接中有更加详细的说明。为了方便阅读可以跳过但是建议在适当是时候阅读它。 特点和优势特点 Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。 Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 Redis支持数据的备份，即master-slave模式的数据备份。 优势 性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。 原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。 丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。 小贴士：publish/subscribe ：订阅发布模式。阅发布模式定义了一种一对多的依赖关系，让多个订阅者对象同时监听某一个主题对象。这个主题对象在自身状态变化时，会通知所有订阅者对象，使它们能够自动更新自己的状态。他是设计模式中的一种。Redis支持了这种模式。阅读了解更多订阅发布模式[3]订阅发布模式介绍。或者看有关Redis下订阅发布模式的支持[4]。 实践篇安装Rediswindows[5] 下载地址 Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择。 注意 操作系统位数可以在我的电脑中的右键属性中看到。如果不知道就试试64位。Redis版本要最好和公司生产环境使用的发行版本一直，保证bug与问题可以重现。 压缩包到 C 盘，解压后，将文件夹重新命名为 redis。(当然不安装到c盘也是允许的) 打开一个 cmd 窗口 使用cd命令切换目录到 C:\redis 运行 redis-server.exe redis.windows.conf 。 123$ cd c:/redis$ redis-server.exe redis.windows.conf## 这里的 redis.windows.conf 是Redis启动的配置文件 当这里不输入时 默认使用这个配置打开Redis服务。 如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的配置。 如果运行成功了。会出现和下面大致相似的返回。 简单解释一下Port是端口。PID是进程号。 注意 服务启动后命令行不能关闭。 扩展：即使在windows下任然有比较好的终端解决方案。可以下载git使用git 的bash。或者直接使用docker。在docker中启动Redis或许是最优雅的解决方案。不过我个人建议开发的话换成macOS。 MacOS1$ brew install redis 搞定了！ 命令行注意 在类unix系统中，redis-cli是作为一个命令存在的。它的作用是启动一个与Redis的交互的命令行模式。Windows用户要双击redis-cli.exe 可执行文件进入，这里是下面命令执行的前提。 创建键（key）使用set key value的方法就可以建立一组键值对了。比如: 1set zzh goodboy 这里zzh就被设置成了goodboy了。这里在此运行set命令可以把key zzh设置成其他的值，可以自己试试。 获取key使用get key可以得到key被设置的value的值。 使用dump key可以得到序列化后的value的值。 使用 exists key可以查询key是否存在。 删除key使用del key删除key 重命名keyRENAME key newkey 将key改为newkey 的名字。如果newkey存在的话，则newkey的内容会丢失。RENAMENX key newkey仅当 newkey 不存在时，将 key 改名为 newkey. 设置过期时间 这里的的key-value有类似于缓存的机制可以在一定时间过后自动的消亡。所以可以设置过期时间。 EXPIRE key seconds为给定 key 设置过期时间。时间为秒。 EXPIREAT key timestampEXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。 PEXPIRE key milliseconds设置 key 的过期时间以毫秒计。 PEXPIREAT key milliseconds-timestamp设置 key 过期时间的时间戳(unix timestamp) 以毫秒计 PERSIST key移除 key 的过期时间，key 将持久保持。 查询过期时间 PTTL key 以毫秒为单位返回 key 的剩余的过期时间。 TTL key以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。 查询key KEYS params可以用keys加上查询条件的方式。比如我要查询所有以aba开头的key。 1keys aba* 实用工具介绍接下来将要介绍使用RedisDesktopManager(以下简称RDM) 使用教程。RDM是一款开源的redis管理GUI。 下载安装。 下载地址 连接服务器 点击新建连接。让rdm新建一个到服务器的连接 填写选项。点击完成。 name: 连接的名称，自己取的不会影响连接的属性，尽量起有意义的值，比如环境，开发环境还是测试环境可以用dev和test表示。host: redis服务启动的ip地址或者域名。本机可以是localhost或者172.0.0.1。建议使用域名的方式，这样修改host的域名配置节省大量时间。port: redis 服务启动的端口号。Auth：获取权限的秘钥。可以理解登录的密码。本地服务启动时默认没有密码可不填。其他环境需要联系管理员获取。 在某个库下新建key 选中某一个库，右键，选择新建key。 在新建中可以写key的类型和key的值。 查询key 一样的选择一个库比如db0然后右键有一个筛选。(filter 英文为过滤器) 现在他会提示输入一个’regex’。也就是说他支持正则表达式查询。这里可以先理解为正常关键字查询即可。 查完完你会发现列表中key变少了。怎么办？同样选择库右键，有一个还原筛选即可调回所有的key。 扩展：regex 正则表达式。是一种通用的计算机技术。甚至可以专门拿一本书来学。它可以实现文本中的模式配置。比如以xx开头，以xx结尾。以xx开头但是不包含yy结尾。以字母开头，以数字结尾。这些你能想到的模式都可以表示出来。学习正则是一个庞大的工程。建议在使用时查询规则来尝试。先学习其最基本的语法.[7] 修改删除操作 选中一个key在其右侧就有一系列的操作方法。如下图： redis + DB 的讨论 现在一般应用已经放弃了menchace+DB的组合而投身到redis+DB的阵营中来。特别是那种缓存需求量特别大，切需要管理的应用。 首先redis具有缓存的性质。key-value存在内存中读写速度快，而且可以设置消亡时间，这都符合一个缓存的要求。 但是memchae和redis不同，一断电，一重启，所有的键值对都将消失。redis则可以优雅的继续正常工作，因为redis提供了数据持久化的解决方案。要知道在缓存服务器重启的一瞬间，请求key的IO对数据库的压力是恐怖的。那么这里为什么说到了数据库呢？这一般与redis到DB的二层结构有关。 我们模拟一个应用场景。一个webapp要调用用户的基本信息。但是由于一开始的公司发展原因，用户的基本信息不一张表里面，甚至不在一个库里面。比如要调取用户的购买的会员要走支付和crm的接口。这两个还算正常的，有的情况下一个信息接口要调用7、8个部门，而且算下来有10个sql之多。这样一个接口的速度可能慢的夸张。更要命的是，这样的接口一开始数据变化是比较大的，但是一旦用户成为长期用户这些信息将很少改变。可是使用这样接口的场景却非常的多。怎么办呢？ 一般（以java或者php举例）情况下，程序员使用缓存的办法来解决。当有人第一次请求这个接口的时候，执行sql查询数据库。现在将查出来的数据放在缓存中（比如Redis服务中）。现在有意思了，在第二次请求的时候，程序会先检查key是否存在，如果存在，直接获取value就可以了。这样非常快，因为数据在内存中。这样大大的提高的应用的速度，减少了数据库IO的压力。 那么你或许会问如果数据改变了呢？这样读出来的缓存中的value和数据库中的数据不是不一致了吗？对这就是一种bug。一般可以手动的删除key。让程序在请求的时候重新走sql获取值，生成新key就可以了。或者更彻底的方法是在开发内部形成一套缓存key的生成规范，在修改数据的时候，使用程序删除key就可以了。 扩展：上面的例子包含一个通用的知识—分布式设计。使用多级缓存的方式只不过是其中很小的一部分。不过这是架构师的研究范围。这里有一片非常简短的基础的博文的介绍.[8] 这里还设计到了两个常用的概念。颗粒度和命中率。 颗粒度指的是一个key对应value所包含内容的大小，是一个相对的概念。比如一个key缓存了一整个网页，的颗粒度要比访问只缓存了数据段的颗粒度要大。在保证命中率高的情况下，我们希望颗粒度尽量的大一些，这证明了，资源的利用效率比较高。那么命中率是什么呢？指的是单位时间内请求同一个key的次数。 考虑这样一个问题：数据a一分钟被请求10次，b被请求1000次。那么单独的为两个数据设置key就是合理的。如果使用hashmap为两数据设置联合的缓存可能就浪费了请求数据时IO的性能。 注意！然而一般情况下对性能的影响不是特别大，如果请求次数不上到一定级别的话（但是讲道理到了一定数量级了，性能瓶颈就不由程序员这样解决了）是没有多大差别的。 本文使用是叫做markdown的语法写成的。这里有其教程[9] 引用表 [1] Redis基础介绍 [2]Redis中的数据类型 [3]订阅发布模式介绍 [4]Redis下订阅发布模式的支持 [5]Window下的安装教程 [6]RedisDesktopManager官方使用手册 [7]正则表达式基本语法 [8]初认分布式知识 [9]markdown语法教程 附录：表1：Redis 支持的语言表 ActionScript C C++ C# Clojure Common Lisp Dart Erlang Go Haskell Haxe Io Java Node.js Lua Objective-C Perl PHP Pure Data Python R Ruby Scala Smalltalk Tcl 配置文件参数说明: redis.conf 配置项说明如下： 1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程 daemonize no 2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定(这个会和操作系统有关) pidfile /var/run/redis.pid 3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字 port 6379 4. 绑定的主机地址 bind 127.0.0.1 5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能 timeout 300 6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose loglevel verbose 7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null logfile stdout 8. 设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id databases 16 9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合 save &lt;seconds&gt; &lt;changes&gt; Redis默认配置文件中提供了三个条件： save 900 1 save 300 10 save 60 10000 分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。 10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大 rdbcompression yes 11. 指定本地数据库文件名，默认值为dump.rdb dbfilename dump.rdb 12. 指定本地数据库存放目录 dir ./ 13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步 slaveof &lt;masterip&gt; &lt;masterport&gt; 14. 当master服务设置了密码保护时，slav服务连接master的密码 masterauth &lt;master-password&gt; 15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭 requirepass foobared 16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息 maxclients 128 17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区 maxmemory &lt;bytes&gt; 18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no appendonly no 19. 指定更新日志文件名，默认为appendonly.aof appendfilename appendonly.aof 20. 指定更新日志条件，共有3个可选值： no：表示等操作系统进行数据缓存同步到磁盘（快） always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） everysec：表示每秒同步一次（折衷，默认值） appendfsync everysec 21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制） vm-enabled no 22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享 vm-swap-file /tmp/redis.swap 23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0 vm-max-memory 0 24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值 vm-page-size 32 25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。 vm-pages 134217728 26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4 vm-max-threads 4 27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启 glueoutputbuf yes 28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法 hash-max-zipmap-entries 64 hash-max-zipmap-value 512 29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍） activerehashing yes 30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件 include /path/to/local.conf 我将一直的无知与迷惑，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node黑魔法使用js打开终端并运行命令]]></title>
    <url>%2F2017%2F05%2F02%2Fnode%E9%BB%91%E9%AD%94%E6%B3%95%E4%BD%BF%E7%94%A8js%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E5%B9%B6%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[OverView 在编程的魔法世界中，有许多的黑魔法，其中最黑的几种肯定有js了。特别是接触到了nodejs和npm后。顿时觉得无所不能，拥有了触及全世界的力量。在这篇文章中，你将看到使用js打开一个终端并且让他运行指定的命令的方法。 预备知识node 运行终端命令 使用一个叫做shelljs的命令就可以了。送上传送门。请翻墙！ OSX 中的open命令 使用这个命令可以打开一个应用。比如打开一个叫做Abc的应用。（没有这个应用的）使用$ open -a Abc就可以了。 通过这些预备知识几乎就可完成这项任务了。你想到了吗。不看下面。自己试试 :) 思路 在js中有一些可以运行命令行的方法。但是似乎没有那种可以打开一个终端，然后让打开的终端运行一组命令的方法。我有向别人请教，如何实现。不过反馈中更多是建议我写一个假终端，这个思路也很酷。不过我不相信有js做不到的事。 使用shelljs运行生成一个shell命令行文件使用 echo &gt;&gt; run.sh \#/bin/sh code就可以。 同样使用shelljs 运行一个命令 给刚才的文件加上运行权限 使用shelljs运行open命令用终端打开这个文件。 （optional）结束时删除。 代码 比如我们现在要想写一个查询本地docker下运行容器，并用按钮打开的应用。要求是在容易列表的没一项有进入容器的按钮可以打开新命令行进入到容器里面。下面是一部分代码。 1234567891011121314var shell = require('shelljs');//这里要下载shell插件module.export = &#123; open:function(name)&#123; //生成run.sh脚本 var comd = 'echo &gt;&gt; run.sh \#/bin/sh docker start '+name+'\n docker attach '+name; shell.exrc(comd,&#123;silent:true&#125;); //给脚本增加运行权限 shell.exec('chmod +x run.sh',&#123;silent:true&#125;); //打开运行 shell.exec('open -a Terminal run.sh'); &#125;&#125;//其他代码省略 我将一直的无知与迷惑，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>node</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用spacemacs订阅新闻组]]></title>
    <url>%2F2017%2F05%2F01%2F%E4%BD%BF%E7%94%A8spacemacs%E8%AE%A2%E9%98%85%E6%96%B0%E9%97%BB%E7%BB%84%2F</url>
    <content type="text"><![CDATA[OverView 本教程针对于spacemacs用户书写。看吧，如果你和我都在emacs阵营，真的会推荐给你很多好玩的东西。接下来你将看到如果配置使用spacemacs中的一个插件来获取新闻组。 开始配置 进入spacemacs然后使用快捷键SPC-h-SPC后键入我们要使用的layer的名字，叫做elfeed。如果你英文足够好，现在可以自己完成一切了。 如果你不会不要担心。很简单只需要两部。 1.在你的配置文件的layer中写好配置像是下面这样 12345678(elfeed :variables elfeed-feeds '(("https://emacs-china.org/latest.rss" emacs) ("http://zzhcoding.coding.me/atom.xml" zhouzihao) ("https://www.zhihu.com/rss" 知乎) ("http://songshuhui.net/feed" 松鼠科学会) ("http://www.geekpark.net/rss" 极客公园) ("http://feed.cnblogs.com/blog/u/62514/rss" 个体博客) )) 2.你可以清楚的看到我都订阅了一些什么。现在重新启动emacs 然后使用快捷键SPC-a-f就可以看到一个什么都没有的界面。使用快捷键gr更新就可以开始的阅读了。 新的问题 现在的问题就是怎么才能找到好玩的，有用的rss了。这个问题相信一定难不到大家，使用百度谷歌都可以。说实话这种看新闻的方式有一定复古，但是比起广告多起的app这个真的算的上是天堂了。 (现在发现使用这个layer读取新闻的时候存在突然卡顿的现象，所以这个不是最佳的解决方案，一旦发现了我一定会在第一时间共享粗来的。) 问题解决补充 卡顿的问题可能是由于在加载图片时造成的。这里在论坛中的大神建议关闭图片加载。这会对eww加载图片有所影响。不过好在我使用的是3wm插件来浏览网页。所以问题不大。配置代码如下:1(setq shr-inhibit-images t) 我将一直的无知与迷惑，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>spacemacs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用js导出Excel文档]]></title>
    <url>%2F2017%2F05%2F01%2F%E4%BD%BF%E7%94%A8js%E5%AF%BC%E5%87%BAExcel%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[OverView 最近研究了一下js中一个导出数据到Excel的模块。发现国内竟然没有人翻译。而小学弟学妹们听见导出Excel什么的，更是闻虎色变。其实没那么难。今天香蕉君就翻译一下。原文地址传送门。注意下面都是我这个英语渣的翻译，如果发现了错误欢迎指出。 翻译之前再啰嗦几句 安装node使用npm下载依赖。（真不知道我在担心些什么） 使用 excel-export 在传入到execute 方法前设置好‘设置’对象的值。如果你想生成多个“工作表”（译者加：就是Excel下方那个可以切换的地方也有叫做sheet的）,那么建立一个对象数组即可。或者你可以直接传对象就会在一个“工作表中” 使用name属性可以给这个“工作表”命名。 使用clos是一个给纵列定义属性的数组。纵列的定义需要caption名称和type类型两个必须字段，和宽度可选字段。宽度是字符的。[1]属性中还可是定义一个叫做beforeCellWrite的回调函数。这函数有row（行），cell data（单元数据），option object（配置对象）（一会再说）三个形参。返回值就是填充这个单元的真正数据。（译者加：明显这是为了方便预处理）。支持的类型有：string（字符串），date（日期），bool（逻辑）和 number（数值）类型。 使用rows表示要被导出的数据。它是数组的数组。它的每个数组长度要和clos一致。 表格的样式是可选的。然而如果你使用表格样式，那么一个有效的样式xml文件是必须的。一个简单的方法获取这样的文件的方法是‘unzip’[2]一个包含你想要样式的Excel并把样式文件复制出来使用。使用stylesXmlFile属性赋值来使用。了解更多样式请百度。呵呵。 eOpt(配置对象)在刚才说的回调函数中包含行和列的信息。eOpt.styleIndex应该是一个从0开的的所以，表示选择传入样式文件中表示单元格样式的标签。eOpt.cellType默认情况下是和之前定义好的type是保持一致的。然而在特定的应用场景下你也可以修改他。 [1] 原文这里是 The unit for width property is character。但是看代码这里似乎是一个数字类型。 [2] ‘unzip’是什么操作？解压？这里不知道怎么翻译。也不知道怎么从其中导出样式文件。如果知道的希望告知，谢谢。 示例代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455var express = require('express');var nodeExcel = require('excel-export');var app = express();app.get('/Excel', function(req, res)&#123; var conf =&#123;&#125;; conf.stylesXmlFile = "styles.xml"; conf.name = "mysheet"; conf.cols = [&#123; caption:'string', type:'string', beforeCellWrite:function(row, cellData)&#123; return cellData.toUpperCase(); &#125;, width:28.7109375 &#125;,&#123; caption:'date', type:'date', beforeCellWrite:function()&#123; var originDate = new Date(Date.UTC(1899,11,30)); return function(row, cellData, eOpt)&#123; if (eOpt.rowNum%2)&#123; eOpt.styleIndex = 1; &#125; else&#123; eOpt.styleIndex = 2; &#125; if (cellData === null)&#123; eOpt.cellType = 'string'; return 'N/A'; &#125; else return (cellData - originDate) / (24 * 60 * 60 * 1000); &#125; &#125;() &#125;,&#123; caption:'bool', type:'bool' &#125;,&#123; caption:'number', type:'number' &#125;]; conf.rows = [ ['pi', new Date(Date.UTC(2013, 4, 1)), true, 3.14], ["e", new Date(2012, 4, 1), false, 2.7182], ["M&amp;M&lt;&gt;'", new Date(Date.UTC(2013, 6, 9)), false, 1.61803], ["null date", null, true, 1.414] ]; var result = nodeExcel.execute(conf); res.setHeader('Content-Type', 'application/vnd.openxmlformats'); res.setHeader("Content-Disposition", "attachment; filename=" + "Report.xlsx"); res.end(result, 'binary');&#125;);app.listen(3000);console.log('Listening on port 3000'); 鸣谢 最后再次感谢这个模块的作者。functionscope。谢谢你的工作，真的很棒。 finally，thanks to the author functionscope.greate work,Really Inspiring！ 我将一直的无知与迷惑，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[梦话]]></title>
    <url>%2F2017%2F04%2F25%2F%E6%A2%A6%E8%AF%9D%2F</url>
    <content type="text"><![CDATA[不必要的前言 最近由于一个机缘巧合，我开始思考一些与我并不相干的问题。主要是失眠的情况下，用来打发时间的思想流。其中充满了唯心的悲观看法。于是我定义这些接近于梦话。如果我不失眠了，这种状况或许要少一些。 什么是社会 首先，社会是一个集合的概念。简单的说一个人不能叫社会，只有许多人才叫社会。不严谨的定义，是有着密切关系的人类的和称。可以毫不疑惑的说，我就在社会中。但是我从未思考过，什么才是社会，这个概念的本质是什么？ 那么这里不得不提的就是关系，这里有许多组的相互关系。在社会中人和人的关系，人和社会中物质材料的关系。还有社会中的个体和社会的关系。可以说无关系不社会。但是我不认为关系是社会的本质。不认为一定数量的人和人关系的网络就可以定义成社会。当然这个定义可以在几乎所有的情况下成立。而已只要你说出一个具有一定数量的人的群体，并且存在某种关系网络在这个群体中，就可以称之为社会。比如我们常常说什么是一个小社会，这肯定了其具有了社会应该具有的全部性质。 可是要指出这不能说明社会的成因。至少是我直管感受下社会的成因。我们甚至可以说一个蚁群是一个社会。但是这里我们可以直管的理解到不是我们的社会。也不是我这里说的社会。我说的是特指人类社会。这里讲的不是人类文明，因为我对文明这词本身存在一定的怀疑。我说讨论的是我们所处的，可以感知的社会。就是我生活的社会这一概念。这个充满了问题的社会。也是这样的一个巨大的客观的实体才有讨论的价值。 先谈存在 要解决社会是什么的问题，要先解决存在的问题。即存在和本质的先后。我是倾向于存在先与本质。那就是我们在社会中并没有什么终极使命，换句话说没有什么是我一出生就必须承担的事和责任。无论是理想还是抱负，都是后天的赋值。存在没有道理。如果你非要将因果叫做道理，那么我可以说任何一个在成“果”之后，便和这个“因”毫无关系。这里并不悲观，这样我们在有为自己赋值的空间。这样灵魂才是自由的，虽然荒诞但是是纯粹自由的。可是我们看到的结果是我们的生活往往不是这样的。我们常常为一些事情所烦恼。我称之为“身份枷锁”。 这里的身份枷锁就是，社会关系对人个体赋值的结果。你是一位喜欢探险的人，希望去远处爬山，但是你不能这么做，你还有老婆孩子要养活，于是你很快的放弃了这个念头。你的身份被赋值为“父亲”。身份枷锁并不能对一个人起实际的作用。也就是说他的身份是“父亲”“丈夫”并不能阻止，他的想法和行为。实际上因为人灵魂自由的伴随存在而来的，所以没哟有效的方法让人不去想。但是真正阻止行为的也是“想”，担心也是想的一种吧。这里是担心别人的评价。没有人希望在别人的评价体系里别看低。 那是评价吗？ 社会的本质是由评价系统建立的身份枷锁？这样说似乎给评价这个词太多的价值和作用。人是具有理性的，我们不会对单单的一个评价就选择行动或者不行动。虽然有的时候是一种评价的预期对我们在社会中的行为做指导。但是有的时候这种指导又是没有效果的。可见这样描绘的社会图景是不完全的，不本质的。在评价的背后一定还有一层更深的原因，或者逻辑本源。只是仅仅现在描绘出的社会图景就不能让人乐观。 讨论赋值的来源 这里我不禁怀疑起来，所谓的身份枷锁的赋值行为有一个更加本质的逻辑传统。要讨论着种本质就要分析我们身份枷锁的来源。 上面的例子中枷锁来自后天的社会契约，在中国这个社会中（至少在这里）是有八卦式的评论系统进行维持。但是我们知道不是所有的枷锁都来自于此。比如法律是由国家暴力机关进行维持的。但是这样就很难解释一些社会行为。比如爱国者对在国内对其他国家车辆的破坏行为。在比如大街上殴打小三而无人报警制止。（当天这件事实的成因或许更加的复杂）这些行为单单使用身份枷锁是很难解决的。因为身份枷锁是一种制约，是在社会中存在的人不去做某些决策的原因。但是不能成为其不理性行为和不利己行为的原因。于是乎我要面临的一个首要问题是：在社会中，人在追求评价升级的情况下，为什么会做出损人不利己的行为？我觉得这个问题比起，在利己的社会下，做出利他行为更加的有意义。当然后面这个问题有人研究过。不过大致的结论还是利己的，是某种“利己”。或许是这种利他可以提升他的评价，或者给与其心灵上的安慰，是唯心上的一种自我加强。这里不过多的讨论了。 这里我们先把身份枷锁进行一定的抽象。他可以约束人的行为，但是是被动的，不大可能是产生某种积极（这里是主动）行为的诱因。也就是我是一名警察不太可能是我欺负一个素不相识的流浪汉的原因。但是这件事确实是发生过的。虽然不是中国的社会。那么是什么使我们轻易的中伤他人呢？ 是分类行为。 这是我认为社会之所以具有今天这个形态的全部逻辑来源。有点类似的叫做贴标签。不同的是标签是某些特定的属性，而分类着可能默认包含了一组属性。这种分类带来的后果是可怕的。比如在学校中分班后，所谓好班和坏班。在比如学校中存在的好学校坏学校。这种分类的行为其实是我们在做任何一个决策时必然发生的社会心理过程。又是是显示的，想想他和我是不是一个利益集团。有的时候又是隐式的，比如爱国行为。 这个解释了一切，我们在倾向性的分类，在某种语境下，把自己和某些具体共同利益和性质或历史记忆的人分为一类，然后无成本的迫害剥削不属于自己一类的人。 绝望的结论 这里我深深对这种人类的分类行为提出批判。这使我不禁想到了中国传统的大同的概念与齐物论。发现在中国传统观念中有对于这种社会形态倾向的批判。不过我仍然对这些思想持保留态度。因为我们有研究过这些古老思想，在当时的社会出发点和我今天描述的问题是否一样。这使我怀疑我在思考过程中是不是在刻意的异化社会这个概念。先看看现在社会的定义。 社会是自然人在数量一定多的集合中，使用分类排他的决策方式派生出关系网络而形成的动态平衡。所谓法律与道德，是平衡下的妥协产物。是一种终极评价系统，这套系统要不由由社会独立出来的团体强制或者社会中每个来自觉维护。 如果这样可以看出所谓的是舆论，不过是这个评价体系中的一部分，而不是什么公权力。道德的本质使人怀疑和警惕。一个公共事件发生，由于当今信息社会的特点，人们更加倾向于对非自己分类的个体给与低评价，而给与自己类别高评价。由于网络的虚拟性，这个评价不在需要成本，或许网民中有些个体根本不把任何其他网名当做同类。于是乎社会出现了种种问题。没有了理性，没有了实用角度，原因很简单，那样的成本过高，并且被别人分为异类的概率太高了。 比如一个人觉得不能怎么怎么样要做一个正义的人，那么久有人告诉他不要这样做。为什么呢？一个看似正确的言论变成不正常的了？这里我要强调我不对任何这种争论发表真实看法。我本质觉得这种情况是没有讨论的必要的。为什么这么觉得我有时间在讨论。单单说这里，原来看似不正确的言论会有人支持。其实道理很简单，我觉得可以借用沉默的螺旋的思路来解释，结合我说的分类原理。原来这种看似分类人数少的类别在信息自由化的今天，大家发现原来与我同类别的人这么多，于是敢于说话了，于是乎慢慢的抢占了主流。 我这说的绝望是什么意思呢？难道我觉得现在因为坏人越来越多了，那按照这样社会会按照坏人的分类体系发展。如果你这么以为就太小看我的害怕了。对于所谓好坏我是不去这样判断的。我说过存在先与本质，于是分类的选择是一种正常的行为，一种理性的行为，于是乎不在好与坏，而在于特定语境的争夺。这里关键的是语境，语境是分类的要素，而好与坏是对应语境下的。对于利益相关方，有必要烦恼于此。我是不会在意的。我在意的是： 分类行为是怎么的？ 我尝试进行价值判断，是正常的还是异化的。然后我仔细的想了想，把正常这两个字写的老大了，在我那块小黑板上。每天早上起床晚上睡觉前都看一眼想一想。然后不得不承认是正常的。是再正常不过了。甚至“分类”代表着理性。分类是我们认识世界的根本方法。 理性带来的非理性 这仿佛是一个悖论。一直萦绕在我脑海里，我不断思考为什么会这样？其实我没在认识世界的时候有一个行为就是概念区分，举一个简单的例子来说，我们知道是非知道黑白一样。是概念的区分，其实也是对客观事物的分类行为。一旦我们在认识事物的时候完成了概念的区分，事物自然的完成了分类过程。如果你不是什么事都模棱两可的话，当你认识事物的时候，当你自认为清晰概念的时候，其实是在曲解了概念。 可是不区分概念，那么我们怎么认知呢？高级的认知更是向概念细化的程度发展，可是这种人类自以为神性的，先验的理性，结果是一定的非理性，不~更加直白的表述是必然的非理性。我陷入了迷思，要么批评理性本身？可是要知道这种批判本身就带有所谓理性的分析方式和逻辑出发点。如果批判成立，即可马上对批判的理性过程进行否定，即批判不成立。那么肯定这种非理性，即分类的思考方式是可以肯定的，是正常的，是合法的，是一般性的。于是由此派生出来的种种问题，是随机的结果。是不确定什么时间发送的必然？没有办法从根本上解决社会中分类行为，和所带来的问题？ 如果是这样一切竟然可以自洽。分类是我认识事物的继承性结果，是正常的概念记忆方式，与逻辑习惯。于是分类决定一个人的评价体系和评价逻辑。由于利益平衡人们自觉维护这套体系。在社会运动和历史继承中，评价标准处于暂时平衡出现法律和道德，于是乎，基于当前集体中个体的职能分工，人被身份枷锁赋值。 这里任何一个环节如果主观意志与这套逻辑链中的既定历史结果出现了冲突，就会出现矛盾。从心理学角度看可能叫做心理不健康，甚至是变态。从法律角度看可能是某种犯罪。利益共享者可能觉得他疯了。利益冲突者可能觉得他道德败坏。无关者更倾向于负面评价或者娱乐化。 但是这一切的一切都是正常的。社会这个概念天然排除主观的独立判断结果。或者说，它不影响，不过是一个尺度，用来给这主观的个人行为下定义，作为给出的概念区分的判断标准。分类是一个人由出生到社会中生成的内因和联系。评价则是维持这种联系的行为。 我本来对这套东西的批判，但是却不得不得出这个是社会之所以是社会的必然条件。这不得不让我有些沮丧，问题根源出现在哪里？ 再次回到不可知 我害怕回到相信不可知论，和命运论的思考中。因为在哪里有一个有神论的结局在向我招手，或者说一个精神病人在想你们招手。这的思考没有答案而且很容易循环自证。不然我有的想有关意义本是是什么的问题想几天睡不着觉。可是这不是找寻答案的态度。于是我不得不重新审视不可知的世界。 我姑且认为世界是可知的吧。我们知道了很大的星星，和很小的夸克。但是我是怎么知道的呢？有些是看有些是靠计算。有些只存在我们脑海中，但是我们可以行动去验证去演绎。可是我们怎么表述我们知道了呢？说出来？写下来。用什么工具？语言？文字？符号？我写下来了，于是我记录了我的观察，可是这个概念清晰了？他就描述了我的想法？只可意会不能言传，那你还说出来！ 所以我们能正常的交流，真是一个奇迹。 或者说这件事，重来没有发生过。一千个读者有一千个哈莫雷特。一万个人类，就有一万个“人类”。我说要你拿杯水的时候，你拿了水给我，不过是水的巧合的映射到那个物体上了。或者说，我在说的时候都不知道我具体是要什么！一想到这里我浑身都起鸡皮疙瘩。灵魂交流一开始解释一个不存在的概念。是个概念的概念。 由此意义成了被定义。（完了~又到了意义）因为我不知道，所以当我说出来的时候它才存在。可是存在不是先与本质吗？不然唯物的世界就说不清了。 我与社会的关系 由此我没有了结论。这次的思考混乱不堪。]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拾遗录13早期的非主流风格]]></title>
    <url>%2F2017%2F04%2F23%2F%E6%8B%BE%E9%81%97%E5%BD%9513%E6%97%A9%E6%9C%9F%E7%9A%84%E9%9D%9E%E4%B8%BB%E6%B5%81%E9%A3%8E%E6%A0%BC%2F</url>
    <content type="text"><![CDATA[写在前面 唯一是我自己迷惑的我最早期的诗是下面这种有点非主流风格。而为啥要这样用词？额………… 我不记得了。 诗123456789101112131415161718192021222324无题雨后屋檐琉璃夏的心田绯色莲荷花盛开在池塘之前连心草，思念滑动，难以团圆彻底忘记不如不去怀念两幅画只待一个人，失望出线怎么是当初写下的诺言彩虹岸边风吹动，令人浮想联翩水中波纹散闲月，无法安详入眠十字结，记录 心中动情语言回首间繁华似梦 又是三年 解 当然有点形散神不散的意思。可是诗中主题依旧晦涩难懂。诗中描述画面色彩太过油腻，颜色用的太甜了。额最后一段简直是各种毕业晚会的百搭词。而且每段单独拿出来叫诗都有人信。可能本人梦游写的吧，哈哈。]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>拾遗录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拾遗录12]]></title>
    <url>%2F2017%2F04%2F23%2F%E6%8B%BE%E9%81%97%E5%BD%9512%2F</url>
    <content type="text"><![CDATA[写在前面 不好意思好久都没有更新了，实在是因为上班太忙了最近。不过这个系列看的人应该是不多。是我个人向的作品集。最近工作不是特别的好，常常不在状态。也没有时间学习新的技术，所以以至于技术分享也没有更新，这个实在遗憾。 今天熬夜于是可以继续填这个坑，而且我正在构思拾遗录中的小说部分怎么写比较好。这是个很难的问题，肯定不能一句句的分析，要是大概讲一下情节也没啥情节，要是重新整理一章章的重写，估计我这每晚都不用睡觉了。想想无论如何都很麻烦，但是要做。不过还有一些诗没有整理，一切看心情吧。一些很莫名奇妙的作品（比如歌词什么的），我准备专门都写在一起啥解说也没有那种。算是用这种方法都拾了。 花语的胡言乱语诗 花语 风笛好像百灵鸟 沙漏不停的颠倒 幸福像一株水藻 轻轻的，慢慢摇 枫树染红一片天 流水代替了时间 送你一袋薰衣草 香香的，清清散掉 花卉丛中你欢笑 花圃上空彩云飘 写首诗，邮给你 这种告白好不好 你的衣裙字花间奔跑 花瓣沾到了我的长袍 我浅浅的吻你的嘴角 就这样相恋好不好 你害羞的挪动着双脚 说你喜欢紫罗兰的俊俏 我温柔的捋顺你的发梢 聆听你百合般的心跳 丁香花如此奇妙 以至于我们都没有准备好 跪在栀子花面前祈祷 时间停止好不好 但你离开的好早好早 玫瑰花还没有开好 杜鹃花已经逃跑 待你一朵回来--华妙！ 解 意义不明。最后一个词是我造的。意思自己猜吧。]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>拾遗录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拾遗录11]]></title>
    <url>%2F2017%2F04%2F15%2F%E6%8B%BE%E9%81%97%E5%BD%9511%2F</url>
    <content type="text"><![CDATA[曾经我最难熬的日子 没有人可以预见未来和自己的命运。 所以无论发生了什么，无论他多么的荒诞多么的不讲道理。我所能做的，不过是默默承受。 曾经我不知道生命的意义，现在我也一样的迷惑。 那是三月的一个早晨。没有可以看见的雨。是层层水汽。刚上了一节最早的课，实在是待不下去了，于是乎逃了出来。场景十分戏剧我往宿舍走，其他人向三教走去。 雾气很快的弄湿了我的头发，模糊了我的眼镜。“一切都很糟糕”那时我想。父亲突然去世了。自己在学校的一切都不是很在意了。有些人知道这个消息，然后和我一样伪装出日常，只是很小心。我害怕被人知道我伤心，于是要时不时的开心一点。不过与我来说都是有点难度的事。 我从三教逆着人潮，走过体育馆，走到女生宿舍的那面墙前。墙由上而下垂下了的绿瀑上开着小黄花，冷风出来，依然开放。我记得那天是3月2号。山城已是开花的季节但是仍旧寒冷。小黄花伴着花季之名，于白雾的清晨，成群开放。 于是哽咽 12已是三月花季，风中仍留寒意。秋风藏在花里，开出一阵叹息。 有些痛苦隐藏在欢笑中。那时候我应该哭出来就会好些吧。但是却偏偏倔强着，自尊着没有。]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>拾遗录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拾遗录10好久]]></title>
    <url>%2F2017%2F04%2F05%2F%E6%8B%BE%E9%81%97%E5%BD%9510%E5%A5%BD%E4%B9%85%2F</url>
    <content type="text"><![CDATA[写在前面 额，回顾我的现代诗集，大部分是初中时代的作品。内容多是言情（好吧我全部的作品都言情。）情绪都是伤心（好吧我全部的作品都伤心）。这首是最最伤心的。 诗1234567891011121314151617181920212223242526好久，好久一个人傻站在街头望着路灯，好久，好久站到洁白从天而降发现自己等了，好久，好久无意间发觉花瓶没有水了才知道花死了，好久，好久打开手机的记录之后知道自己孤单了，好久，好久莫名的感觉或许来了，好久，好久自己竟然偷看她的微笑不知不觉，好久，好久当安于现状突然发现幸福离开了，好久，好久我看不到她的双鬓随风轻摆了，好久，好久当一年之后，我们如同路人但感动停留过，好久，好久不过，当本不该来的又本不该离开时我偷偷哭了，好久，好久]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>拾遗录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拾遗录9]]></title>
    <url>%2F2017%2F04%2F04%2F%E6%8B%BE%E9%81%97%E5%BD%959%2F</url>
    <content type="text"><![CDATA[写在前面 大家好。由于清明节有事情，所以没有按时更新。但是我也知道没有什么人看这个系列。哈哈哈。没事儿。反正也没有人看，我这几句就瞎写了。哈哈哈。这次回大庆终于把我的现代诗的小册子带到重庆了。可以开始现代诗了。这次不用解说了哈哈哈。 诗123456789101112131415161718192021222324252627282930313233343536373839404142434445日访吸血鬼残喘了一千年的灵魂终于有了一丝体温沾满鲜血的嘴唇也由泪水去滋润是谁给他施下封印阵逼他去读赎罪文欺骗自己不能结婚无法去爱那个人吸血鬼就是这样阳光下留着温存蓝色的人类眼神去捕获猎物的唇被上帝抛弃的人却找到新的女神亲吻着她的长发放弃嗜血的单纯残喘了一千年的灵魂只等待着她的吻放纵黑夜的污与混熟悉了十字架上的咒文吸血鬼还是这样月光下逃避猎人渐渐失去理智只为饱餐一顿被青春遗忘的人回忆中带着悔恨那双喋血之手再度推开地狱之门残喘了一千年的灵魂因为爱去伤害爱人他那唯一的邪恶吸血后无辜的眼神是谁推动了命运的齿轮使他相信世上的神欺骗自己也是人贪痴与她一起生存虚假的恋人…… 本诗创作与初中。是听过五月天的《夜访吸血鬼》后所做。]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>拾遗录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中阶黑魔法教程-使用PlantUML画关系图]]></title>
    <url>%2F2017%2F03%2F31%2F%E4%B8%AD%E9%98%B6%E9%BB%91%E9%AD%94%E6%B3%95%E6%95%99%E7%A8%8B-%E4%BD%BF%E7%94%A8PlantUML%E7%94%BB%E5%85%B3%E7%B3%BB%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[OverView 当我们使用linux的时间越来越长，就会发现使用鼠标和gui是多么的不安全。作为一名程序员，我们把所有的过程都演进成了编程。比如使用latex对文学进行编程，那么关系图呢？是否也可以使用编程个代码的方式使用呢？我不断的寻找，终于找到了答案，使用PlantMUL。 本文将介绍在emacs下安装使用plantuml的教程。并实现一个plantuml的hello-world程序。之后介绍有关使用plantuml写类间关系图的简单教程。 预备知识什么是 plantUML？ 请百度大兄弟。先送上官方网站。所谓的plantuml是一种画图的脚本语言。这个官方网站是中文的，足以保证你自学了。有许多编辑器可以使用plantuml插件的。但是本文将要介绍eamcs下的插件安装和使用。其他平台请自行百度谷歌吧。 在使用这个教程之前你需要做的是: 安装emacs 使用spacemacs的配置。几乎我所有的教程都是依据这个配置进行的。在我之前的博客中有这个教程。 安装JDK。这个真心也是不难的。（windows用户可能要考虑配置环境变量） 安装 spacemacs中的plantuml layer 使用emacs中spacemacs配置的 plantUML layer。这个在之前博客中有类似的介绍。使用快捷键SPC-h-SPC打开帮助。键入plantuml就可以看到安装教程了。就是在在.spacemace的配置文件中加上plantuml然后重启就可以了。哈哈，现在是不行的。因为plantuml要依赖一个的jar包。这个就是要配置jdk的原因。 下载plantuml.jar后。如果是mac的用户放到~目录下就可以了，这里的路径是默认的。其他平台的用户请自行百度。（QVQ 对不起） 第一个holle-world 程序 现在让我们来感受一下这个plantuml的强大吧。首先我们要记住plantuml文件的扩展名是.pum。好的先建立一个叫做test.pum的文件。写入一下内容。12345@startumlA -&gt; B : lovingB -&gt; C : kind of lovingC --&gt; A : no one knows@enduml 这里有两个快捷键。使用SPC-m-c-o可以设置生成图片的输出格式。现在先设置成png格式。然后使用C-c C-c就可以生成图片了。如下图所示。 现在使用另存为就可是保存使用这张图片了。 使用PlantUML画类关系图 非常遗憾我发现官方网站上的文档已经很全面了。所以我就实在是不想做这个无用功了。虽然他们的排版不一定比我写的漂亮。但是就知识的本质而言我再写一遍是没有意义的。谢谢你的理解。 我将一直的无知与迷惑，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>spacemacs</tag>
        <tag>plantUML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拾遗录8]]></title>
    <url>%2F2017%2F03%2F24%2F%E6%8B%BE%E9%81%97%E5%BD%958%2F</url>
    <content type="text"><![CDATA[写在前面 我知道我们都要乐观，开开心心的过每一天。可以伤心，但是别陷在里面。我希望读到这里的你，可以开心点。哈哈哈哈。不然你也不会读到我写的东西了。 节奏欢快的情诗诗123456789101112131415161718192021 淡淡的幽殇是谁触动了我————淡淡的幽殇是谁抹开了我，灰蒙的印象像是谁许下的期望又像是谁感叹 那无常 而又悠长的月光是谁触到了我————淡淡的幽殇是谁写下过的，“永远不忘”像是雨后的蝶，落向海棠又好似那一圈一圈的年轮 述说着的流浪是谁触及了我————淡淡的幽殇是谁倾慕着，可爱的女郎在某个地方 亦或某个方向也找不出来 同样优雅 而又快活的新娘是谁触摸着我————淡淡的幽殇是谁领着无期的思念 等待着成长是曾经 不该的 【1】还是别的什么？我不曾发现 爱的星光 解 这是一首有旋律感的诗，创作与高中时代。没有什么特别的创作原因，这首诗我自己很喜欢。虽然诗的名字是“淡淡的幽殇”，但是整个诗读下来不会觉得低沉，反而是充满了一种生命力。在上大学的时候才听过一首钢琴曲叫做《快乐还是悲伤》英文名叫做《the soul》灵魂，估计译者是听到了曲中旋律中的矛盾，在快乐的上扬旋律中暗带着悲伤，于是这样命名。我的诗是正好相反的，悲伤中暗带着快乐。喜欢一个人是痛苦的，但是却也是快乐的。我们在恋爱中品尝着种种悲伤，以为那就是爱情的模样，却常常忘了它快乐的一面。 我至今坚信一切的一切都是真的。所以下一次谈到过去读者和我都笑出来吧QvQ [1] 这里是没有写完的部分。在第一次写完的情况下空出来的。补过很多的词。童年 年少 等待 勇气 自尊 等等。这些词我都尝试过，最后都觉得不好，于是就空了下了。读者可以自己填一个词，那一定是一首属于你自己的诗了。]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>拾遗录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Common-Lisp调用C语言函数]]></title>
    <url>%2F2017%2F03%2F24%2F%E4%BD%BF%E7%94%A8Common-Lisp%E8%B0%83%E7%94%A8C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[前言 我们知道在emacs实现中使用的lisp和c语言。这个设计使得emacs成了一件不折不扣的艺术品。这样的好处是将两种语言的长处发挥到了极致。当然其中还有一些设计哲学要去学习。不过我们先看看在common lisp中调用到c语言的函数。 我的环境 MacOS SLIME （emacs + spacemacs 配置） mac自带的gcc quicklisp 以上这些的教程都可以在我之前的博客中找到，我就不写传送门了。 准备过程（其中可能有方法论） 接触这个问题的过程是从我希望使用common lisp写出GUI来开始的。那么我有什么路可以走呢？自己写一个图像化接口几乎是不可能的。其实如果哪天我疯了或许会开始这样的一个项目:P 那么现在有一条路可以走，就是调用已经有的跨平台图像化接口。第一个想到的竟然是openGL，额。尴尬的是OpenGL来做这个活并是很开心。而且在我面前还有一个重要的问题，那就是怎么用CL调用到C语言实现的文件。（动态和静态链接库） 于是我百度谷歌使用CL调用C语言函数，结果有一个人问：用cffi和ffi那个好？额。这个是什么呢？结果一查我发现这个是Common Foreign Function Interface的缩写。外部函数接口。这个不就是我想要的吗？简单的看一下英文这个不就有C的支持吗~于是信息若狂，的打开了文档。这里有传送门 所以让我们写一个小的demo来调用，自己使用c写的一个测试方法吧。 完成c文件 新建一个项目。建立一个叫做testlib.c的文件。现在我们就定义一个简单的函数吧。如下:12345678#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define MIX 100int test_fn(int x)&#123; return MIX;&#125; 要记住我们是没有办法直接使用c语言的源码的。我们需要先编译了才可以了。运行下面的命令就可以生成必要的文件了。 123$ gcc -c testlib.c# 这将生成 .o 文件 然后我们要的是 .so 文件$ gcc -shared -fPIC -o testlib.so testlib.o 使用common lisp 来调用这个文件 现在在同级的目录下建立一个叫做test.lisp的文件。文件里的内容如下: 1234567891011;; test cffi(ql:quickload "cffi")(cffi:define-foreign-library testlib (:unix "testlib.so") (t (:default "testlib")))(cffi:use-foreign-library testlib)(cffi:defctype back-max :int)(cffi:defcfun "test_fn" back-max (x :int)) 简单的介绍一下这些代码在做什么。define-foreign-library是在定义一个C语言的库。这个方法用来指定库的位置和在不同环境中的位置。然后use-foreign-library加载这个库。现在直接调用时调用不到的。我们需要定义这个c中的函数到lisp中，同样要定义好入参和出参的值。 现在SPC-m-&#39;打开一个REPL，然后逐条的对上面的语句使用C-c C-c。如果没有错的话现在就可以调用这个函数了。 我们在REPL中输入(test_fn 1)就可以看到返回了我们在c中定义好的100了。 Learn More 现在就可以写我们自己的c语言的函数，然后使用lisp优雅的调用他们。但是单单是我上面的介绍肯定远远不够。我们还需要在必要的时候阅读上面传送门中的文档才行的 写在最后 我本来是想在这个过程中使用lisp调用有名的gtk。虽然我现在还是不了解那是个啥。安装也没有成功。但是并不影响我在成功调用到c语言时的激动。相信我可以使用CL的这个功能在以后带来更加精彩的应用。谢谢读者们。 我将一直的迷惑与无知，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>lisp</tag>
        <tag>cffi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拾遗录7]]></title>
    <url>%2F2017%2F03%2F18%2F%E6%8B%BE%E9%81%97%E5%BD%957%2F</url>
    <content type="text"><![CDATA[题于同学录诗1234百花殆尽方很晚，归雁南山故人心。 社过桃李香不在，醉卧席听门扉音。 邻家姊弟笑正临，青竹相伴秋千去。 仰首空间白鸟孤，低头不忆垂髫时。 解 想解这首诗，就要提一下这首诗的创作背景。高三正是到了毕业季的时候，大家开始互相发同学录。（不知道当初什么原因。我是没有的，现在有一些后悔）一个女同学给我了同学录，(不是我喜欢的那个)正值年少轻狂的我，于是在寄语中写了这首诗，以卖弄自己的“才华”。一样的并没有什么才华好去卖弄，写同学录的时候重要的是真诚，好在我给大家写的都很认真，我本人也很珍重。只不过那时诗句就在脑子里，于是就写下来了。 “百花殆尽方很晚”这句老实说写的并不是很好。我本意就是写一个铺垫，铺垫一种分离的气氛，但是写出了一种要分离却悔恨的苦楚，实在是在渲染手法上乱了分寸。同样是分离,觉得“恨晚”的自责和同学间分离的不舍是有区别的。只能说功力不够，花鸟来凑。不过细细想来也还可以，人不都是在分离的时候在觉得自责吗？分离就分离吧，没事的，就像每年归来南山的鸿雁，心还是一样的。这里……现在想想真是有点耐人寻味的感觉。我后来去重庆上学住的就是南山。但是我当时怎么会知道呢？我连我能考到什么学校都不知道。如今看来有些命运离奇之感。 “社”这里是使用的一个隐喻，古代的时候“社”是一种祭祀活动，要杀猪杀羊喝酒祭天。此处暗指的就是吃的那顿散伙饭。正是那样的春季，聚会过后“桃李”就都不在，就都离开校园，大家酒过三巡，欢愉不在，也安静下来。醉卧席间。仿佛若有所失，仿佛若有所得。安静异常，听到门咯吱的声响。 忽然有人回忆起了更加小时候的事来。“那个时候我和邻居家的小妹妹玩的很好，我还和她手拉着手一去去荡秋千呢…………”众人目光变向远方，仿佛真的看到那时的情景。是啊，曾经我们不也是一无所知的小孩子，可是时光一晃就到了到了现在了。抬头看天，一只白鸟飞过。不禁低下头低语:“不说儿时的事了”。 这里，白鸟是时间的隐喻。不知道为什么我就是觉得白鸟是代表光阴的意象。其实那是青春未过却又有青春很快的意味。这最后一句是情感的收束。是我写诗的毛病和问题。总是使用一个情绪低的结尾。这首诗在情感表达上是克制的，但不是美好的。在艺术手法上使用了简单的“举头望明月，低头思故乡”的模式。可意境始终是低沉了些，只是到了今日我有了一个，比较积极的新解释。 看见白鸟，即知道时光继续流逝，既是匆匆逝去，又是滚滚未来。和从前儿时的玩伴虽然忘记了，但是我们不是又交到了新的朋友吗！青春如此来来去去，这次努力不忘记就好。“别说你小时候的那些事了”，我们快讨论讨论想去哪所大学，有什么理想，有的没的都可以说……………… 不行我编不下去了。你们自己想吧~ 读我自己的诗真是郁闷啊。我下次一定要找一首欢快的诗来写。一定。]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>拾遗录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Common-Lisp写一个png文本转换器]]></title>
    <url>%2F2017%2F03%2F17%2F%E4%BD%BF%E7%94%A8Common-Lisp%E5%86%99%E4%B8%80%E4%B8%AApng%E6%96%87%E6%9C%AC%E8%BD%AC%E6%8D%A2%E5%99%A8%2F</url>
    <content type="text"><![CDATA[注意 本文为非干货版本。其中有我从开始到最后的几乎全部开发时的思想，和走的一些弯路。如果你和我一样不愿意看这些，请直接看源码。 前言 要提到最初的想法，很疯狂。这要从我使用w3m在命令行里看网页开始。那时我十分喜爱没有css样式的网页。（ps：前端听到会气死的）渐渐我喜欢上了命令行的简单编辑方式。于是我使用emacs。也使用emacs上的eww进行网页浏览。那是本着使用emacs做一切的精神，于是思考：可以用emacs看视频吗？这个估计是肯定可以的。但是我不喜欢那种直接使用外部播放器的形式。我想要的是即使使用命令行也可以观看视频的网络服务。 哈哈。估计只有疯子想在如今这个时代做这样的事吧。现在网速也可以了，没有必要把图片压缩成这样的格式，在进行传输。但是仅仅是一个想法，仅仅是好玩。那是我使用的工具是java和c，这两语言当时对我来说一个有太多的细节要去讨论（java）另外一个太底层要做太多的工作。更恐怖的是，我当时对多媒体编码一窍不通，这里不是说我现在就通了，而是我知道了他的可怕，那时纯是出身牛犊不怕虎。 现在我学习Common lisp想着正好做点什么练练手。视频太复杂了。试试把一张图片转化成文本格式吧。 我的环境和工具 MacBook Pro emacs 使用的是spacemacs的配置 添加了common lisp的layer 使用SBLC作为lisp解释器的实现 使用quicklisp 作为system构建工具 关于quicklisp使用的介绍我就不写了 别人写的很好的 传送门 献上。这个很有用，如果你学习这个教程一定要看。 开始顶层设计 首先我们知道一张图片是一个数字的概念，至少在计算机里。有许多的点(像素)，每个点上有一个颜色，合起来就是一张图片。那么我操作这些点的值或者根据这些值进行一定的计算就可以得出我们想要的图了。 一些细节 哈哈。听上去很容易。但是有很多的细节要解决。首先图片有很多的格式，比如png,gif等。我怎么从这些文件中获得到对应的点阵(这里我叫他bitmap)呢？这个是其一。其二我怎么解决使用的文件的格式问题，这么多文件格式我只提供一个入口？ 第二个问题好解决。文件格式很多我肯定不能一次性写完，虽然他们从bitmap到文本的算法是相同的。于是我觉得先写一个png的转换器在一步一步的做。然后又时间了把其他类型补上。这个问题解决的了。现在变成了怎么从png导出到bitmap的形式。 于是我去看了png格式的文档。这尼玛，官网文档是英文的啃下来我这肯定是要疯的。于是找了一些博客，发现上面写png格式的数据段格式不是按照顺序存的，而且还使用了我没有听说过的压缩算法。这不是要坑我吗~而且使用了CRC校验，这我是大学的时候学过，但是最讨厌了。怎么办？ 这个有关于png压缩算法的 传送门 。有兴趣的朋友还是应该看看，特别是学编码的同学。 探索过程 有一句话说的好。你能想到的轮子别人都做过了。虽然这句话有毒，要是这么想就什么也不用写了。但是也有一定的道理。lisp风行怎么多年，不可能连一个解析png的小模块都没有。但是怎么找呢？百度？谷歌？答案是都不太好。肯定是我的搜索词有问题。(关于搜索我将单独写一个文章)百度就不说了没啥人查lisp的东西，文章也少。谷歌，相关度或许要高一些。但是呢~ 英文实在不好啃。于是我使用了github自带的搜索。于是一下子出来了好几个。有zpng,png-read。有的写了不错的文档，虽然是因为的但是还是要啃的。文档不好怎么办，读源码吧。于是在png-read中发现了他可以读取一个PNG文件返回一个CRC校验结果，并且返回一个png-state的对象。再打开这个文件看到这个对象中有一个槽(lisp中的对象属性)名字叫image-data。这个或许就是了。我靠，突然发现命名是如此的重要。 现在又有一个问题了，我怎么使用这个包里面的函数呢？我怎么构建自己的项目呢？毕竟我是连那个包管理都弄得很蒙圈的人。而且要处理依赖什么的。想想在php中人们使用composer在java中使用meavn，那么common lisp就没有什么吗？于是我找到了quicklisp。上面的传送门里有介绍哦。(如果你想读懂我下面的内容就要看) 开始编程吧 现在我们需要的东西都有了,可以开始了吧。先写一个最简单的，读取一个png文件到一个全局变量里面。1234 (defparameter *png-object* nil)(defun set-png-object (file) (setf *png-object* (png-read:read-png-file file))) 这个函数再简单不过了。现在我想这样先获取一个图片的宽和高以便于在后面可以方便的建立一个对应的bitmap进行接下来的运算。 还有我写的其他很多函数都要判断这个*png-boject*这个值存不存在以免出现不安全的调用。 12345678(defun check-object-and-do-funcation (fn)(if (eql nil *png-object*) (format t "we never hava png-object.please use funcation (set-png-object *file*) to set frist") (funcall fn)))(defun get-size ()(let ((fn #'(lambda () (list (png-read:width *png-object*) (png-read:height *png-object*))))) (check-object-and-do-funcation fn))) 好了。回到一个重要的问题上面。我们怎么转换的算法问题了。 一点算法的讨论 说道这个算法，我就想到了我在大学的时候学的一门叫做《数字图像处理》的课程。想当初我因为经常逃课不去，还被取消了考试资格，无奈来年重修了。 说道这个算法我首先想到了就是简化。首先说道我们使用的颜色表示系统。RGB颜色。这个很简单用过PS的都知道，比如我们熟悉的66CCFF是洛天依的颜色。表示的就是这个系统—红绿蓝。值都是从0到255。也就是说这里每个点存的是一个向量。现在由于我使用文字符号作为颜色的表示于是就不可以考虑图片的颜色差别，只能估计到颜色的深浅（其实可以，一会有空我在讨论），于是乎我就要把原来的3维的向量映射到一个灰度表上。这里将有许多种思路。其中先说本程序使用的，也是最简单的方法。 RGB到灰度的算法算数平局值法 这个方法估计一下子就可以想到了。就是算三个颜色的平局值然后在根据这个平均值进行映射。想一下原来时0-255每个，取完值还是255个。这个方法真的不算是最好，不过是最简明的。但是是我思考了其他方法最后选择的。因为这个方法的缺点很明显，比如两完全不同的颜色（0 255 0）和（255 0 0）。在这种算法下本来是一个正常的边界，现在灰度会变成一样，就糊到一起了。这个当然不是我希望看到的。 注意 下面的内容和专业知识有关，但是写的又很不专业，如果你不感兴趣我不建议你看，也许会对你造成迷惑。（我将用“选”字标记） 向量距离法（名字自取 不知道有没有这种算法）选 这个算法没有结果测试，完全是我自己脑补的。首先一般的像素点周围有8个向量。正好是9宫格中，中心点周围的8个。那么他与每个向量有一个距离。（即向量间距离，这个高中就有学计算起来不是很难）这个距离可能是正的（+）也可能是负的（-）。这里的正和负正好反应了他和另外一个像素比是“更深了”还是“更浅了”。而数值的大小表示的就是灰度的差别。那么我们可以制作一个这样的一个九宫格的模板。中间正好是四周向量间距离的和。让这个模板在整个图片中走一遍就可以得到一个新的图像了。这里还可以进行一些小改进比如在模板中加入权值的方法。这个方法的好处是图片的边缘的部分被锐化了。（在强调一次，我没有试验过，我是理论上这样认为，如果有时间我将试验一次） 从灰度图映射到字符 这里我们得到了一个bitmap了，就是我说的灰度图。（这里是思想试验得到的，不是真的。从我读取数据到我得到灰度图，还是需要一些时间的）那么我们要做的就是写一个方法，将灰度对应到一个字符表上。这里有一个很大的问题，怎么定义一个字符表呢？这个问题我没有很好的答案。至少应该是根据字符位图中占的黑块数目的多少来确定的。那么这个怎么确定呢？对不起这里我没有很好的找到代码的实现，也没有自己的实现。我甚至都不知道在搜索引擎中使用那个关键字进行搜索，在qq问别人也很难描述。这个问题太奇葩了。当然这个还不是最奇葩的。可以看看下面写的“更加有趣的想法”。于是我根据自己经验定义了一个灰度0到19也就是二十个字符的对照表。这个对照表写的很有问题你可以修改或扩充它，或者使用其他算法生成它。代码如下： 1234567891011121314151617181920212223(defun get-string (i)(case i (19 ".") (18 ",") (17 "_") (16 "-") (15 "~") (14 ":") (13 "!") (12 "+") (11 "=") (10 "a") (9 "0") (8 "b") (7 "%") (6 "V") (5 "H") (4 "E") (3 "&amp;") (2 "#") (1 "M") (0 "@") (otherwise "@"))) 好了我们现在要讨论的成了从算出来的0-255的灰度值到这20个符号的映射问题了。 简单分割法 你可能会想这个有什么好分的，不是就是255除以一个数得19余个几然后分个20个区吗！然后每个区对应一个字符。ok~我就是这样的方法。没有任何问题。这个方法简明好理解。或者如果出现最后一个区太大，可以取巧一点各个区匀一点。下面是实现的代码。123456(defun get-string-bitmap (bitmap)(let ((string-bitmap (make-array (get-size) :initial-element "."))) (dotimes (i (png-read:width *png-object*)) (dotimes (j (png-read:height *png-object*)) (setf (aref string-bitmap i j) (get-string (aref bitmap i j))))) string-bitmap)) 但是这个并不是很好的方法。为什么呢？想一下如果一个图得出的灰度集中在某一个范围内，怎么办呢？比如都出现在20-99之间。结果这里就只有对应3个符号，本来有起伏的一张图片就变的一摸黑了。这个当然不是我们希望的。 直方图法 选 实际上这个也思想并不复杂。我就是想让图片中所有的像素的灰度分布的广义点。比如说原来有一个图片只有3个字符对应的（使用简单分割），现在会出这个图片灰度分布的直方图，然后重新定义灰度到符号的映射关系。让密的地方多分几个符号，让稀疏的地方少分几个符号。这个是可行的。这样将会时原来的图像层次丰富起来。这个思路完全是照搬《数字图像处理》这本书中的思想，如果有这本书的同学不妨可以拿来看看。这里实现过程和算法细节我就不说了。 更加有趣的想法 选 现在让我们忘了使用“深浅”定义灰度到字符的映射关系。忘掉之前所有说过的算法。先想一个问题：一个像素点对应一个字符合理吗？想想一个符号占的大小，绝对比一个像素点还要大吧。那么比如一个符号的宽和高占的大小是10个像素。当然具体多少我也不知道。那么一张原来是200X200的小图片就变成了2000X200的大图片，这个更不用说是1080X1920的大图了。在电脑屏幕下根本显示不过来。于是最优的方法是，根据一个字符占的空间的大小来匹配图片中对应大小的空间。这里就有一个相似度的问题。这样在我看来是最优的解，根本不需要定义什么映射表就可以达到。但是我对于字符所占像素大小和获取上面的像素点信息的方法没有头绪。而且使用预定义列表表示字符的方法很反感。这个有趣的想法只能日后来解决了。 实验结果 我从网络上找到了一张“面码的图片”一下是处理生成的文件: 不足 由于开始把宽和高搞错了导致图片是旋转了90度的(已经修复) 由于对图片像素的读取顺序的未知，图片是镜子中的。(已经修复) 图片总是很大不方便看 git源码传送门 传送门 写在最后 使用lisp开发时一段开心的旅程。但是一些有用的lisp特性并没有使用成，可能是我使用的不熟，有可以是没有使用的必要。不过这个在3天的时间完成了，这个速度是我自己都没有想到的。我总结了一下是我对于搜索工具的使用上更加的高效，也归功于CL这门语言的独特魅力。这次写完其实很激动想总结一下方法论的东西但是写到这里也就罢了。 我将一直的迷惑与无知，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>lisp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Common-Lisp教程（2）]]></title>
    <url>%2F2017%2F03%2F13%2FCommon-Lisp%E6%95%99%E7%A8%8B%EF%BC%882%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前言 在lisp中有这许多迷人的特性，要弄清他们还真的不是很容易。我都不确定自己到最后可不可以真正的弄清楚。所以暂时将最简单和浅显的内容整理出来。 函数函数的定义 (defun [函数名] ()[形参表] “函数说明”()[函数体]) 这有几点要说明。首先这里面对形参表是指它前面一个括号里面的列表(list)，当然也可以为空形参有多种形式一会介绍。函数说明可以不写，但是出于规范，我还是建议你写上函数的说明文档，函数说明可以通过某种方法得到。函数体可以使是一个合法的S-表达式。当函数被调用的时候。lisp将对这表达式求值并返回。 实例:1234(defun add-two (x) "add two to x" (+ x 2));; (add-two 1) =&gt; 3 函数的形参&amp;key关键字形参 关键字形参使用&amp;key作为关键字。默认的在&amp;key后都视为关键字实参。与正常参数的不同关键字形参在赋实参时，需要像字典一样进行赋值。 1234(defun say-love (&amp;key he her (say nil say-p)) "a funcation to make he say love to her" '(he (if say-p (if say 'is 'not) 'not) say love to her));; (say-love :he banana :her hyacinth :say t) 我们可以看到在这里可以对关键字形参设置一个默认值，如果没有传值的情况下，该变量就会是这个值。而也可以使用一个x-p来接受是否传了这个值。正如上面的代码一样如果传了值say-p就是t，没有传的情况下就是nil。 在lisp中 t 表示逻辑真。 nil 表示逻辑假。 &amp;optional 可选形参 可选形参表示参数是可选性的，如果不传值lisp并不会向你报错。当然你可以给他们附一个缺省值，默认情况下会是nil。 &amp;rest 可变长参数 在编程的过程中，我们可能有不确定参数个数的情况。关于这个关键字。官方有这样的解释: 如果我们在函数的形参列表里的最后一个变量前，插入 &amp;rest 符号，那么当这个函数被调用时，这个变量会被设成一个带有剩余参数的列表 以下是一个实现了funcall的例子。 12(defun our-funcall (fn &amp;rest args)(apply fn args)) 定义匿名函数 相信使用过其他语言的匿名函数对非常熟悉了，他在闭包中有很大的作用。这里匿名函数使用关键字lambda。这里的形式和函数的定义相似，就是把defun改成lambda不加函数说明就好了。其他是一样的。匿名函数没有那么多的参数列表类型。这正好与匿名函数的应用场景有关。 那么如何得到匿名函数呢？有一个语法糖。使用#&#39;即可。如下: 1(remove-if-not #'(lambda (x) (= (mod x 2)))) 写在最后 我快疯了。我看了两个教程。发现两个教程的风格,完全不一样。一个是《实用Common Lisp编程》这个注重实践。不像一般教课书，一板一眼。一开始在我还没有了解语言的全部基本语法的情况下，带我写了一个简单的数据库。实用很多实用的函数还要宏的概念。让你你开始就看到了lisp的实力。 但是这本书不适合喜欢节奏的没有时间的宝宝们。如果你有热情，你还有时间可以一周内学完这本书的实例的话。我建议你使用这本书。 但是如果你没有时间，喜欢有章节的学习。忘了的时候还可以查询的话。我推荐你官方教程的翻译。传送门这个可能翻墙小伙伴们，学习科学上网吧。 看完这个教程你可能踌躇满志，想用lisp写点什么，突然不知道它可以写点什么。这时《使用Common Lisp编程》就成了最佳的选择。书中有进行垃圾处理的程序和一个音乐管理器。这都是不错很酷的尝试。 我教程的更新速度将更加慢了。因为我已经为你找到了，更好的学习路线。如果有机会我将，在以后的文章中写自己用Common Lisp做的有趣的事。 那个时候来到了。一定很快乐吧:) 我将一直的迷惑与无知，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>lisp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拾遗录6那些花儿]]></title>
    <url>%2F2017%2F03%2F12%2F%E6%8B%BE%E9%81%97%E5%BD%956%E9%82%A3%E4%BA%9B%E8%8A%B1%E5%84%BF%2F</url>
    <content type="text"><![CDATA[玉兰三首诗123456789 玉兰 素素白玉兰，幽幽香倾园。 飒飒凉风起，美娥停房前。 笑笑昔时情，泪泪今不理。 碌碌相思苦，恨君不成语。 淋淋一夜雨，纷纷花离枝。 容颜何易老，春风伴雨时。 解 在重庆玉兰是一种很常见的植物。在我母校重邮的校园中就有许多。她们大致在春季一开学的时候便会开花。都是长在树上的，不过有一种长在很高的树上。就在二教。想要碰到，只有去二楼，在打开窗子伸手出去。不过我是没有真的去二楼打开窗子伸手。倒不是觉得危险什么的，是没有这样的兴致。 我是很喜欢花花草草什么的，但是自己养不活，也懒的打理。从大庆一来到重庆，最使我感叹的就是这座城市的植物。那些花式我在北方不曾见过的。春天有白玉林，广玉兰，到了4月又有樱花，秋冬之时还有桂花的花香。而这首玉兰是我在大学时的练习诗。即是写物诗并无什么意义。 可以看出我在诗中使用叠词，希望制造出一些不一样的语言节奏。第一首可以看出来在努力写花，我也写的很认真，还使用了拟人的手法。但是第二首就突然开始写花以外的事了。无非又是毫无新意的痴男怨女。不读也罢~而其中诗句也有前人词汇之影子。“碌碌相思苦，恨君不成语”不知道有多少人写过。真心苦于自己文思闭塞，关键的时候写不出好诗句来。到了第三首又开始写花写人。以花之命运来写人的命运。问什么“容易何易老”现在想想真是一个无聊的问题。我不是回答过了吗~我觉得回答这个问题是我全诗的关键所在。 容颜易老。花颜易老。那是以花喻人，还是以人喻花？我想了很久这里的写法，觉得都不是。易老的不是人和花，是万物。“易老”是自然的规律。即便你是婷婷盛开清风徐来，还是香气宜人婀娜婉转，结局都是“易老”。此问如此观之便是无意义的。我们常常把易老的锅甩给一个确定的事物。是别人，是误会，是分离，是欲望，是时间。其实都可以不是。我们或许努力着，憧憬着。然后不经意间就发现了。哈哈~言过，什么“易老”之因或许一开始就不是我这样一个20多岁人应该考虑的话题。真惊叹于自己曾经格调有些低了。 这里最后一句曾经修改过几次。我本子上记得是“容颜何易老，相恋负心时”。后来觉得格调太低。前一句其实就是答案，于是私下改为了“容颜何易老，一夜雨淋淋”。想想又觉得重复了。于是改为了上文中的内容。 残语几句诗123 残语几句 一年一年又一年，分离相视已无言。 春风春雨春花尽，春思春愁春不眠。 解 本诗成于大四期间。具体时日不记得了。反正你可以看出来我写的就一个“春”。说白了就是残语几句，太直白了。这就是我后来的风格变化写诗越来越直白。越来越不喜欢使用典故与一些谐音表达自己的情感。往往是爆发似的吼叫，诗中宁静不在。但是还是有写悲伤气氛。至于原因嘛。我也不知道。或许是我自己的问题吧~ 写在最后 本来没啥好说的。我以为自己的拾遗过程会很有趣。想想自己当初的想法，会不自觉的发笑。这样也是寻见了一件趣事。可惜不是这样的。为什么我写的诗都是不开心的诗。我以前就这个多愁善感吗？这和我的外貌可是极度的不符啊。这样只会别人笑我，我自己是笑不出来吧。以至于我发现有些诗，我连读不不想重读。回忆起写的时候的感觉，很不是滋味。于是有的诗没有整理到拾遗录中。我也知道这些东西也不会有谁愿意来看的。]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>拾遗录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拾遗录5秋风中的少女]]></title>
    <url>%2F2017%2F03%2F04%2F%E6%8B%BE%E9%81%97%E5%BD%955%E7%A7%8B%E9%A3%8E%E4%B8%AD%E7%9A%84%E5%B0%91%E5%A5%B3%2F</url>
    <content type="text"><![CDATA[秋风中的少女词123 相见欢 秋洛神 诵古书窗小院，杨柳纷，黑衫颦顰摘叶黄，枕坠旁。 停适处，洛神伤，暗自凉，浑然远眺秋波寄篱墙 解 首先这个是一个有题目的词。这样的有题目的词我写很少，是因为我实在懒得起题目。就连本词也不过是在下阙中取三个字。这是一首写记事词，诗中之场景是真实发生过的。我与一位朋友一起见证过。不过诗中的少女不是什么我暗恋的人，也不是我笔下的什么洛神美女。是一个很普通的人，她相貌平平，凭心而论算不上漂亮。而且性格也不像我诗中所写有古典之风格，甚至有点疯癫的时刻。我跟她也不熟。说这些，不过是要给各位读者打一个预防针，词是靠不住的东西。在写词人（我不算了）心里，可能就是和吃饭唱歌一样是一件平常的事。 “诵古书窗小院”是用古典的场景来写现在的校园，这个校园是我高中的校园。当时在高中第二节课下课进入大课间，大家都回去食堂的服务部去买点吃的东西，我和友人走在去往食堂的路上。两个男生定时聊一下有的没的无聊话题。时至深秋，万物枯黄。校园中的杨柳早就身披金甲，秋风无情，任意拨弄。于是杨柳纷纷，风声瑟瑟。我和友人远远望去，一个少女在一棵矮树下，盯着那棵树。白色的树干，淡黄的树叶，黑色的发，黑色的大衣。她细细端详的神态，安静秋风中显得孤独而美丽。我和友人不禁看待了。 我们放慢了脚步，都不说话。只见她“颦顰”两步，贴近树枝，慢慢的挑选，摘下一朵黄叶。秋风不识趣，一波一波的袭来，少女的发被缭乱。她卷起秀发，顺达耳后，手中那枚黄叶轻拍这着她的脸颊…… 上阙中内容很好理解，下阙怎么就突然“停适处，洛神伤，暗自凉”了呢？这个场景美丽，不是姑娘美丽（当然姑娘也美但是不是这首词的审美所在）。是意境神伤，不是我神伤。所以暗自凉的是秋意与秋风。“停适”更像是时间的暂停，我与友人若有所思。高中生活很快，节奏快时间也快。见到此景便有了少有的宁静。这可能就是妹子的力量吧。这也是我对美的理解。每当她们自由自在无所顾虑之时，便有天真可爱之美丽。那是在人灵魂底端的真实，我天生的审美的细胞自然告诉我，使我自然的开心。我常常被这样的美所治愈。也常常发现这样的美。总结就是两个字，自然。其实不太准确。不过懂我的读者一定懂我的意思。哈哈哈。 回过神来，想再看看时，人已经离开。只见远处白墙。美不是结果，是过程。不是抽象的，是藏在实际的事物中。庸俗的将是发现美丽的眼的问题。我却要说是孤独程度的问题。或许无人懂秋风中她为何要摘黄叶，也无人懂我为何若有所思，一切思虑在风中发生，在风中被遗忘。 有点可惜我想不起来，当时在想什么了。 矛盾的人啊词123 长相思 无题 系也乱，拆也乱，中国结断妄自散，不忍挥刀尺。 合也怨，弃也怨，破镜难圆半照面，倩影忽若现。 解 我觉得这首词我是我写的最通俗的一首了。估计不需要太多解释就可以看懂。所以简单的解释一下几个意象： 刀尺： 这里只制作衣服的工具。 倩影： 这里有点鬼影的意思。是有一个有关的典故的（已经忘了出处）。 所以上阙是写女下阙是写男。女才挥刀尺，有一到两断的联想。男才见倩影，魂牵梦绕疑神疑鬼。 人就是如此，总是在内心中充满的矛盾的心理。如此纠结反反复复，难以脱离苦海。没有人可以解脱，这世间的男男女女都是一样，所以当你陷入矛盾之中莫要过的烦恼，人皆如此。但是怎么办呢？我词中没有答案。或许都对，或许都不对。谁知道呢~~ 那么谢谢读者们。]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>拾遗录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在emacs中进行文件管理]]></title>
    <url>%2F2017%2F03%2F02%2F%E5%9C%A8emacs%E4%B8%AD%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言 放弃命令行。和我使用emacs吧。打开emacs让我们体验一波。 再次强烈建议读者使用emacs+spacemacs的组合。 进入Dired模式 使用快捷键 C-x D 刷新当前目录 在Dired中 g 就可以了。 选择文件 在dired模式下，如果你要一次性操作多个文件和目录，那么你要先标记 mark 那些问价和目录。 然后再使用快捷键 对这些文件进行操作。 常见mark命令 m 标记当前光标所在的目录。 u 取消当前光标所在文件目录的标记 U 取消所有的标记 d 对要删除的文件和目录进行特殊标记，打上flag t 反选所有的标记 常见文件操作 + 创建一个目录 C (大写)拷贝文件 R 重命名文件，或者说移动文件 D 删除文件 x 删除那些打了flag的文件 Z 使用gzip压缩解压缩文件 使用书签 C-x r m 添加书签 C-x r l 查看标签列表 想直接编辑文件的名称啥的怎么办？ C-x C-q 然后可以编辑了 编辑完再来 C-c C-c 就完成了。 我的天 非常方便 C-c C-k 可以取消这次编辑 跨文件夹操作 在文件夹中按 i 就可以了 $ 可以实现折叠和打开 写在后面 今天施工把以前的博客移植过来了一些。有些是自己没有写完的坑。看来要慢慢的填了。我写文章有一个特点就是如果已经有别人很好的教程我是懒得抄的。于是你可以看到许多的传送门。哈哈你可以叫我传送门法师了。:p 我将一直的迷惑与无知，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>emacs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《高数》书里的鬼故事]]></title>
    <url>%2F2017%2F03%2F02%2F%E3%80%8A%E9%AB%98%E6%95%B0%E3%80%8B%E4%B9%A6%E9%87%8C%E7%9A%84%E9%AC%BC%E6%95%85%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[前言 高等数学书里有的时候给了证明过程，但是却没有给原因。就好像解题方法自己飞出来一样。如鬼故事一般。 数列收敛唯一性的证明 我们都记得在学习高等数学的时候有关于数列极限唯一性的证明。即一个数列只能收敛与一个数。在证明过程中使用反证法： 假设一个数列同时收敛于a和b然后构造了一个ε=(b-a)/2. 然后你会发现你可以轻松的证明出了定理.但是为什么呢?我也是百思不得其解.为什么要这样构造ε呢? 让们我重头解决问题 首先回顾一下数列的极限(收敛)定理是什么样的: 设 {Xn} 为一个数列,如果存在常数 a ,对于任意的的正数 ε (无论他多么的小),总存在正数 N ,使得当 n&gt;N 时,不等式 |Xn-a|&lt;ε 都成立. 那么我们不妨先假设其收敛与M和N看看最直观的会发生什么.由于a和b肯定不一样不妨令a&gt;b; 12n&gt;N1时,|Xn-a|&lt;ε1 总成立. n&gt;N2时,|Xn-b|&lt;ε2 总成立. 这是你能要分类讨论了!当Xn-a&gt;0的情况或Xn-a&lt;0的情况.会得出一下两个式子. 12Xn-a &lt; ε1; a-Xn &lt; ε1; 这是在收敛与a的时候就是两种收敛于b的时候又是两种,排列组合就是4种情况要去讨论,简直就是噩梦. 难道就没有办法了吗? 要是这两个式子都成立就好了.等等! [1] 这时 我们要注意了!!!在定义中ε是一个正数也就是说这两个式子总是成立: 123Xn-a&gt;0时: Xn-a &lt; ε1;成立;由原不等式直接得到. a-Xn &lt; ε1;也成立,因为a-Xn&lt;0一定小于一个正数ε. 那么反过来呢?我们来看看: 123Xn-a&lt;0时:a-Xn &lt; ε1;成立由原来的不等式直接得到Xn-a &lt; ε2;成立.小于零的数一定比大于零的数小 那么我也不用分什么情况了.每个式子都变成两个式子就行了.于是我们得到: 12345678910Xn-a &lt; ε1;a-Xn &lt; ε1;Xn-b &lt; ε2;b-Xn &lt; ε2;整理一下=&gt;Xn &lt; ε1+a;(1)xn &gt; a-ε1;(2)Xn &lt; ε2+b;(3)Xn &gt; b-ε2;(4) 我们始终记得我们要用反证法.那么我们就需要找到矛盾.看看(1),(4)是不是一下就有了灵感. 123ε1+a = b-ε2=&gt;ε1+ε2 = b-a; 看看!看看!这里就明白了书中的策略.他令ε1=ε2=ε于是计算出ε=(b-a)/2的! 其实这里只需要满足这个式子就可以了不一定要什么ε1=ε2我觉得书中的写法反而不利于我们理解. 其实细心的你一定也发现了这个式子不具备普世性.试试这个式子! 1ε1+a &gt;= b-ε2 这才是最终的解题关键!读者不妨试试令ε = (b-a)/16一样可以证明得出.这就交给你们自己去完成吧. 思考 在最初复习高数的时候我在看这段证明时怎么也想不出来!于是卡在这里。我先是奇特于为什么ε要那样的赋值。于是认真的跟着步骤计算了一遍怎么也得不到其中的结果。我思考如果我证明的话我会怎么办.于是才有了这篇文章。 细心的读者可能注意到了[1]处我其实最想的是构造一个Xn&gt; 什么的式子。这样我可以轻易的生产出矛盾。发现当Xn-a&lt;0时可以做到后,开始思考其他情况下怎么证明,于是才有了后面的简化情况讨论。 我将一直的迷惑与无知，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>看书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim操作小结]]></title>
    <url>%2F2017%2F03%2F02%2FVim%E6%93%8D%E4%BD%9C%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[前言 如果你以为我是一个喜欢vim的编辑器的vim支持者你就错了。我是一个emacs的支持者。但是我曾经自大的以为在这个世界上只有emacs的快捷键才是最优秀的。 直到我接触了vim的编辑文本时的快捷键，我才发现vim的编辑模式是如此的高效率，当然使用亲爱的emacs的快捷键效率也是很高的。 但是vim的优点是：它不会使我的手部因为长期使用快捷键而畸形（真）。 所以在看这个教程前我推荐大家使用spacemacs来作为你的主力编辑器。然后使用vim的按键模式。这样两全其美。就像红楼梦中的贾宝玉。娶了黛玉和宝钗一样的爽。 VIM模式 正常模式 （按ESC） 插入模式 （在正常模式下按i等） -INSERT- 可视模式 （* 在正常模式下按v 这条是在spacemacs中的 vim里的不知道） 插入的命令 i 在当前光标之前插入 I 在当前行首的第一字符之前插入（mac 上的spacemacs 其他没试的这么细） a 在当前光标之后插入 A 在当前行未插入 o 在当前行之后插入一行 O 在当前行之前插入一行 查找命令 注意 在spacemacs你完全可以使用emacs的传统 C-s 来完成。但是我还是要写一下vim的方式。 在正常模式下按 / 然后使用 n 查找下一个 使用 N 查找上一个。 注意 特殊的字符在查找时要进行转义! 不过我喜欢下一种方式是在spacemacs中独有的，其实是有插件实现的 如果你在emacs中安装也可以的。 所以来看vim的朋友请跳过这个段直接看下一段吧； spacemacs的朋友们，这个很好用 不过有局限性。就是 SPC v 此时在文本中会自动的选择一个词。接下来就可以再下面的状态栏里有搜索的选项了。你懂得。 这些在spacemacs中方便的指令你也可以在快捷键 SPC s g 中找到哦。 移动命令 这个是我最喜欢vim的地方之一 h= 左移一个字符 l 右移一个字符，这个命令很少用，一般用 =w= 代替。 =w= 是向右移动一个单词。 k 上移一个字符 j 下移一个字符 除了这些还有一些其他常用的命令 0 移动到一行的开头 gg 移动到文件的开头 G 移动到文件的结尾 C-e 向上滚动一行 C-y 向下滚动一行 撤销和重做命令 u 撤销操作 C-r 重做命令 删除命令 x 删除当前字符 dh 删除前一个字符 dd 删除当前行（ps：这个我觉得很有用的） J 删除两行间的空格 拷贝粘贴 y 拷贝当前光标选中的字段 yy 拷贝当前行 p 在当前光标之后粘贴 写在最后 vim中的有些思想真的很优美，有些操作真的比emacs好。学过来就是不要纠结。有信仰，但是信仰应该是方便和美学不是某个编辑器，我们爱的是emacs背后的东西，觉得不能成为器物的奴隶。 我将一直的迷惑与无知，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>emacs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spacemacs下的magit指南]]></title>
    <url>%2F2017%2F03%2F02%2Fspacemacs%E4%B8%8B%E7%9A%84magit%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[看这个教程之前你要: 成功安装了emacs和使用了spacemacs的配置。 已经了解使用了git 为什么要使用magit？ 首先，对于一个用户来说在命令行中使用git时不方便的。我其实没有心情记录那么多的指令。（其实也不多）但是gui又少了一些逼格。那么怎么办呢？又想高效又想直观，又要逼格。于是我们有了magit在这之间的完美权衡。 在spacemacs中配置。 首先magit已经集成在了spacemacs的一个layer中。这个layer就叫做git。layer是什么呢？这里你可以理解为一个spacemacs的一个可扩展模块。只要我们安装了它就可以使用新的功能。相信layer的安装你早就已经会了。就是在.spacemacs配置文件中的dotspacemacs-configuration-layers中的列表中加上git在重启就可以了。 magit的使用 注意 这时你可以使用 SPC h SPC 然后git回车就可以看到全部的文档介绍了。根本不用看我下面的教程了。你可以把下面的内容理解成简单中文笔记就可以了。或者你是一个新手要一步步的实验，那么let‘s Go！。 基本内容 要学习测试这些功能的话，要先在github或者是coding的远程仓库中建立一个项目。然后克隆下来。这里使用哪种方法都可以，也可输入最最原始的clone命令克隆，也可以使用sourceTree的GUI克隆,也可以使用SPC SPC后键入magit-clone来克隆。这些都差不多。现在使用文件管理模式进入到克隆下来的文件夹。 好现在使用快捷键SPC g s进入到magit-mode。你可以在修改一些文件后进来。那么你现在可以在这个模式下有许多的操作。来看常用快捷键: q 退出 s 将添加光标处文件的修改 S 添加全部的文件修改 u 不添加（取消）修改 x 放弃文件的修改 c c 提交这次的修改 相当于commit，此时会出现diff界面还有输入message的buffer 输入commit的信息够C-c C-c提交成功 P u 提交到远程仓库 P m 提交本地分支到远程仓库。（新建本地分支时使用) b b 检出某一个分支 b c 创建某一个分支 一些高级功能使用tag 在magit-mode中。t c创造一个tag。然后使用P T上传到远程仓库。 合并分支 在magit-mode中。m m然后格局提示操作即可。 写在后面 现在你可以很开心的使用git了，而不再需要使用命令行。这也导致了我一些命令和顺序都忘的差不多了。以至于在别人电脑上操作经常的出丑。其实这也没有什么，电脑作为工具本来就是使人更加的方便。所以使用gui也可以。但是程序员，在选择时也是有自己的审美和哲学的。技术和美是分不开的。相信你也体会的到。:) 祝你天天开心，微笑常在。 我将一直的迷惑与无知，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>emacs</tag>
        <tag>git</tag>
        <tag>spacemacs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Common-Lisp教程（1）]]></title>
    <url>%2F2017%2F02%2F28%2FCommon-Lisp%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[写在前面（可以不读） 在写这个系列教程之前我仔细考虑了一下，我要不要写。因为这个common lisp语言我也不会。但是我却觉得自己还是要写这个教程。原因很简单，小的时候你或许也有没有看完的电影，想去却一直没有机会去过的地方，一直很喜欢一个玩具，好不容易存到钱买的时候却被别人买走了。那是一种遗憾，我们未完成的，我们不曾得到的事物，我们内心中总是觉得是美好的。于是感叹要是当时如何如何就好了。当时我要是学common lisp就好了？哈哈。这当然没有，只不过我觉的学好这门语言是我必须做的事。不能每一件事当我们回首的时候都是遗憾吧。 我开始写博客了，并不是要怎样。我是想让我博客的读者明白什么。因为我知道了有人可能读我的文字，于是我知道我有特殊的责任。这个教程非做不可。 安装commom lisp的开发环境 本教程介绍的是在mac下的Slime开发环境。在spacemacs中使用的common lisp 的layer。即emacs+sbcl的组合。还有一些默认的配置。sbcl使用homebrew安装即可。 这个过程并不是很难，使用Spc-h-Spc,输入common-lisp就可以查看文档。虽然是英文的但是说明的很详细。 spacemacs中的一些超级常用快捷键 在lisp文件中SPC m s i 打开一个REPL。REPL是什么一会还有解释。 在lisp文件中使用C-c C-c可以将一个表达式加载到REPL中。 SPC m c C 编译文件并且加载到REPL中。 写第一个holle world程序打开一个REPL 一旦你成功的安装了common lisp的开发环境，你就可以按我说的一步一步的做。首先在你的工作目录新建一个扩展名为lisp的文件，如test.lisp。进入文件。然后使用快捷键SPC m s i打开一个REPL。你可能看到如下的画面。 现在解释一下什么是REPL。他是（read-eval-print loop）读-求值-打印 循环的缩写。也就是说这个REPL会像我们熟悉的python或者matlab的命令行一样，我们输入然后在获取计算输入的值的一个循环。这在lisp中是个很重要的概念。这样我们就可以实现交互式的编程。我们可以一边写功能一边讲funcation编译测试函数的行为是否正确。不像有些语言只有写好后才能知道写的对错。 实际上任何语言几乎只要你想都可以这样开发。但是lisp这样的成本很低，甚至这也是它的核心思想。即交互式开发。至于这样有什么好处我现在还不得而知。 好了现在我们要来体验REPL了。输入(+ 1 1)我们会看到返回了2。相信聪明的读者已经看懂这段代码了。括号里东西组成了一个lisp列表。其中lisp对列表求值时会将第一个元素视为函数的名字。+便是这个函数的名字。注意这里+真的是函数名，不是什么保留字，在lisp中没有什么是保留字。后面两元素便是这个函数的的实参了。 现在我们要写holle world了。先将buffer切换到test.lisp文件中写下下面的函数。 12(defun hello-world () (format t "holle world!")) 这里简单的解释一下defun是一个定义函数的写法，现在我们可以定义一个叫做hello-world的函数了。而format是一个打印的函数。一般情况下函数有一个输入一个输出还有一个副作用。比如我们以删除文件的函数为例。文档的地址为他的输入（有点也可以没有输入），t或者nil（lisp中的真和假）是他的输出。删除文件是他的副作用。也就是说无论如何lisp表达式是会返回值的。format这个函数中打印内容是他的副作用并不是他的返回值，他的放回值一遍为nil。 那么我们现在如何运行这个函数呢？将光标移到函数体内部。使用快捷键C-c C-c现在你将会看到REPL中打印了一些东西。;compiling (DEFUN HELLO-WORLD ...)证明这里函数编译完毕了。现在试试调用这个函数。 hello-world 结果进入了debug模式，还提醒这个值没有绑定（unbond)。这是怎么回事呢？如图： 原来在REPL中调用函数必须使用列表调用，虽然名字是一样的，但是直接键入hello-worldlisp解释器会默认寻找一个叫做hello-world的变量而不是调用这个函数。于是我们应该这样调用。 (hello-world) 于是乎我们看到了正常的输出。这就是lisp的hello world程序了。 写在后面 不好意思，这个不像是教学，更像是我的学习笔记。很多地方没有解释清楚。比如函数定义和变量什么的。但是作为第一个holle-wrold程序足够了。我接下来回整理接下来的章节安排。这个系列可能跟新的很慢，希望可以有好的进度安排。 jekyll中似乎对lisp的语法高亮支持不好。我将在以后解决这个问题。 我将一直的迷惑与无知，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>lisp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中阶黑魔法emacs教程]]></title>
    <url>%2F2017%2F02%2F28%2F%E4%B8%AD%E9%98%B6%E9%BB%91%E9%AD%94%E6%B3%95emacs%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[隆重的前言 这个世界上有太多的分歧，人们很难达成共识。比如吃饺子应该蘸酱油还是蘸醋，豆腐脑吃甜还是吃咸等等。但是这些问题在我眼里一点意义都没有。真正重要的是编辑器之争。什么才是世界上最好的编辑器。我会回答你当然是emacs了。为什么？因为我就是emacs党哈哈。 你可能是小白,还没有选择你信仰，少年！我将世界上最好的编辑器，传福音给你。记住我们的敌人是vim，而不是使用vim的人。少年啊！爱我们的敌人吧。他们有许多的有点可以学习。而使用vim的往往也是有品味的人。至少他没有说sublime，IDE什么的是最好的编辑器，从这个角度讲我们是一样的。vim的使用者往往也是终端指令的高手，他们的组合技往往是：OH—MY—ZSH + vim + 插件。他们关闭打开，关闭打开。并对欣赏这速度乐此不疲。在文本中，他们的上下左右移动只需要一个键，许多快捷操作方便到哭。这就是和我们另外一个阵营的朋友们，他们一样很优雅。 可是我的朋友。请记住在这个世界上没有什么是emacs不能的。教内有人声称emacs不是编辑器是一个操作系统。还差一点，我们离登基那一部还差一点。传送门我们和老朋友vim打了许多年传送门现在可以握手言和了，因为我选择了emacs + spacemacs(vim-mode) +插件。 Come on！和我一起进入今天的黑魔法课程。 准备安装emacs 这个过程一开始可能很轻松也可能很痛苦。这要取决于你使用的是什么平台的电脑。这里有英文的传送门各位小伙伴可以视情况而定，因为我下面还会写一些 Windows 平台 这个我是不太建议在windows下直接使用emacs的，知道用个ubuntu虚拟机或者docker。但是我还是会献上传送门。不是说windows下不能使用，而是说windows下的一切都不好玩。这个我也没有安装过，对不起。但是欢迎你马上投入到linux和mac的阵营中。 linux 平台 这个要简单许多了。以Ubuntu为例，来个传送门。我最开始就是在ubuntu的虚拟机上使用的 Mac 平台 因为这是我现在使用的平台我会详细介绍一下。 首先安装homebrew。安装过的可以跳过。 之后安装emacs-for-mac。用brew安装emacs-plus哈哈！恭喜你遇坑了！我就是这样安装的。结果出现了下方状态栏出现色差的问题。在一位群内好友的帮助下我成功的解决了这个问题;完美的解决方案在这里传送门这个版本的emacs在mac上比较稳定速度也很快。 开始自学吧 对你没有看错。现在你可以自学了。emacs有许多神奇的地方，为了坚持下去你可以选择一项技能先自学起来。比如使用Org模式，这是一个神奇的东西。可以很优雅的管理你的日程。而且我也问过很多哥们都是从这里才开始接触emacs的。当然还有一部分是通过latex接触emacs的。无论是那种都有的折腾一番了。 学完之后 可能你会觉得很缥缈，读到现在了还不知道emacs可以做什么，弄完之后是什么样子。额。好吧，我来简单的介绍一下。 首先这个是炫酷的界面。快乐的分屏和一些操作 这么多 怎么学 使用spacemacs的配置一部搞定。安装传送门 用的时候看说明文档 建议多去看文档，如果我的教程就是把它们抄过来一遍也没有啥意义。 我们的朋友在哪里 在国内有许多的emacs的大法师，比如子龙山人。在优酷中有他全套的教学视频，最重要的是中文的，而且讲解的很详细。子龙山人主页,他有一个《21天学会emacs》的视频很适合去学习。不光如此他还建立了elpa的镜像，（当然这里还有其他人的努力）让不能翻墙的小伙伴获得了福音。 这里不得不说到emacs的国内论坛。emacs-bbs很多大神就活跃在上面，你的提问几乎都有人来回答。相信有了这些信息你将会开始一段快乐的emacs之旅。:) 我将一直的迷惑与无知，我是黄油香蕉君，再见。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>emacs</tag>
        <tag>spacemacs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《暗时间》一本没有读应该马上读的书]]></title>
    <url>%2F2017%2F02%2F27%2F%E3%80%8A%E6%9A%97%E6%97%B6%E9%97%B4%E3%80%8B%E4%B8%80%E6%9C%AC%E6%B2%A1%E6%9C%89%E8%AF%BB%E5%BA%94%E8%AF%A5%E9%A9%AC%E4%B8%8A%E8%AF%BB%E7%9A%84%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[前言 记得我在上大一的时候我们的班学姐向我推荐过这个本书。但是当时我没有看，后来要毕业的时候在同学的书架上发现了，并假借过来。从此发现人类历史中还有这么优秀的思想。如今每次重这本书的内容都会更正我近来的一些误区。接下来我将简单的介绍一下，·我·在书中得到的一些知识。 如果你已经工作了，相信这本书可以让你工作之余的生活更加的有意思。如果你已经结婚有孩子，每天承受着我不曾想象到的生活的压力，我相信你依然可以会爱上这本书的内容，丰富的阅历会使你看到的比我更多。如果你刚刚高中毕业，还没有踏入或者刚刚踏入大学的校园，那么太好了！这本书仿佛就是给你们准备的。你现在完全可以关了我的博客马上去买一本，或者向你的学长借一本。如果你学过编程或者你将要学编程，这个本书对你来说更加的适合。 我甚至觉得所有的理工科的院校都应该把这本书最为大学的一门课程来学。 我更新的知识投入的真正计算方法： 我曾经以为时间就是我的投入。当别人问我学了多久的画画？学了多久编程时。我们往往回答一个时间长度，比如我学了三年编程了，学了五年画画，唱了十年的歌了。其实这样的回答是没有实际意义的,别人在正真在问你你对某件事物的投入。（当然大部分人这样问其实是在寒暄）可是你自己不能当真。我学了三年编程，也写不出一个网上交易系统。但是我上铺的哥们怎么一个月就搞定了呢？有了这样的心里落差是因为我们搞错了一个东西。那就是投入的计算过程。 原来错误的公式是这样的:投入 = 时间于是我们就有了，我“投入”三年，上铺的哥们“投入”一个月。于是得出我的投入比他多的结论。但是我的效果比他差很多，于是又得出了我不适合编程或者我很笨的结论，不然就是得出了我上铺的哥们是个天才的结论，这样安慰自己。 现在我们修正一下公式。 投入 = 时间 X 效率 现在谜底揭开了，我学习编程的时间好像是三年，但是三年中我并没有在真正的每天都在学。好吧就算现在我和他都是用一个月的时间，可能我还是没有他学的好。很简单，我学的时候并没有投入全部的注意力，于是在一些概念上模棱两可。不光是编程，在大学中所有的课程都是如此，可能我去听了一学期的《信号系统》课，也没有上铺的哥们玩了一学期，最后复习一周加上答疑的效果好。 我不是告诉大家要逃课，而是说如果你不知道自己上课在做什么。没有集中注意力去学习，效率为零甚至听着就可以睡着，还不如专门找一个时间自学呢。我是知识本位主义者，一切形式都是纸老虎。 注意 ：答疑真的很重要。交流你不知道的知识点，哪怕是有一点似懂非懂的部分。老师人都很好，当你表现出强大的求知欲，他们不会因为你不上他课就不给你答疑。这样考试也变成了检验你学习成果的有意义的过程，不再是没什么意思的程序了。成绩下来了，不要傻傻的问别人的分数，参考意义不大，没考好就要反思这段时间学习的投入，看看问题是什么。时间太少？还是效率太低？无论哪种都有解决的原因。 学习好英语很重要（外语） 我在大学的时候打过辩论赛：是否要取消义务教育中的英语。其中有一个观点是：以后从事的职业中用不到英语，所以浪费了很多时间。呜呼，哀哉。现在很多人也这样以为的吗？不是这样的。 首先这种看似实用主义的想法在社会上大行其道，其实在逻辑上是经不起推敲的。我最TMD讨厌的就是某些学长学姐，告诉新来的学弟学妹们，什么上大学学不到什么东西，就是来学生组织给进入社会做一个缓冲什么的。虽然我也在同届的人面前互相自嘲过，但是从来没有毒害过孩子们！大学生，一旦上了大学就应该以学者自居，这个自居不是要天天说出来，而是不动声色的做出来。理论上进了大学，什么都要学的，无论文理。也别听他们说“大不了自学”，如果你经历了四年的自学，当然可以拿这句来自嘲，但是别还什么都没有学就把这个句挂在嘴边，甚是可笑。 闲话少序，回到正题。所谓知识有两个特性。 看似无关的知识，存在内在联系。 知识分两类：领域知识，和元知识。 有关这个内容书中解释的更好，更加的详细。我不过是二道贩子，强烈建议去看书。 我们现在一个一个看。第一个大家都有感触。比如我们现在使用的很广泛的CDMA编码技术的发明就是这样。首先赞叹一下这个位被称为CDMA之母的杰出女性,海蒂·拉玛。你一定以为她会像居里夫人一样是个科学家出身，或者是一信息学编码学的天才。都不是！她是一个有名的好莱坞艳星。而且以出演烂片出名。（这个太过了，细心的读者可以自己验证）一次在和他丈夫弹钢琴中她发现了这个算法。（当然有一个懂通信的丈夫也很重要lol。）CDMA的核心思想很简单，你不需要读通信专业也不需要啃《信号系统》我在这里就可以说明白。 比如我不懂钢琴，也对音乐一窍不通。我上铺的哥们和他的女朋友都受过良好的古典音乐教育。一天我们三个在琴房聊天。女的问我上铺的哥们，他生日想要什么礼物。他二话不说，弹了一首李斯特的《钟》。他女友就知道了，他想要一块闹钟或者表之类的。于是又问他（她）们下次去哪里约会。我上铺的哥们又一言不发的弹了一曲奥立维尔.图森的《海边的星空》。于是他女朋友笑了，知道下次要去海边。我哥们很自然的问起了她女友的生日。她让我上铺的哥们挪挪位置，弹奏了一曲肖邦的《冬日》……在一旁不懂音乐的我是懵逼的。他（她）们在干啥呢？这就是CMDA的原理，加长原来的编码。这里可能有点夸张，比如“钟”一个字被变成了一首曲子这么长。这样有两个好处。一是安全，不懂音乐的我就什么也听不懂，只觉得这是美妙的音乐，完全不知道里面的信息。还有一个好处是如果弹错也知道这个是什么曲子。而且旋律越长这种效果越好。 这里的解释方法的创意不是我本人，这种解释方法的原作者已经不记得了。本人盗用创意，进行编造。致谢、致歉。 看吧知识存在的形式，不只是知识的表面。谁知道英语中蕴含怎样的知识呢，所以学习其他看似无用的知识也是一样。不光如此，我们来第二点。就是领域知识和元知识。这个概念我其实没有理的很清晰。（即没有特定的公式判断是A还是B）举个不太恰当的例子。我们知道神话中（圣经还是希腊神话？请知道的同学告诉我一下），人类在诞生之后使用的是一种语言。于是人类想要超越神，大家聚集起来想建立通天的“巴别塔”。神知道了，使用瘟疫与天灾都没有效果。人类的塔继续向天上建来。后来神扰乱了人类的语言。人类不使用一样的语言，不再团结，“巴别塔”也建设不起来了。 这里语言就是元知识，而比如建筑学，工程学之类的就成了领域知识。元知识看似没有直接的作用，但是可以帮助我们更好的获得领域知识。比如心理学，脑科学，记忆学等。所以这里我有点分不清数学属于什么类别。我更愿意定义为工具知识。但是这个又是另外一种分类方法了。 这里有一个很实际的问题，所有知识看似都有用,如何选择呢？人的时间是有限的。我们不光要学习，也要享受生活。必要的情况下还要挣钱，恋爱，考虑未来和家人。那么这个时候你就要好好思考，你是真的在你说的这些事情上投入了吗？还是这些事你也没有做好，你只不过给自己找个借口呢？ 但是如果你真真遇到了类似选择上的烦恼，我这次真的什么也帮不到你，很遗憾我没有这方面的知识。 文理双修 很大一部分原因我在上文中已经介绍了。这里不再赘述。 教是最好的学 你会在书中看到这句的原话的。而且很好理解。而且我已经有了切身体会，高中那会要不是我暗恋的女生经常来找我问题，我估计我连大学都考不上:P 但是自己口才不好，也没有人问我题啊。怎么办呢？到了大学后寝室的哥们大多都在打游戏，平时讨论的也是游戏，只有上铺的哥们在看书，但是我说什么他都懂。难道我要找打游戏的哥们自讨没趣吗？首先我要说打游戏真的很爽，千万不要在他们玩的时候找他们，相信考试之前他们自然会来找你。（或你上铺）如果你是一个女同学，完全可以在约会的时候给你男朋友讲一讲你最近学的内容，或者解题的过程心得什么的。其实最好的方法是写blog，或者做教程视频。如果你坚持下来会发现是一段很神奇的经历。（我没有做过视频，可能是我以后的计划之一） 写在后面 总之，《暗时间》这是一本没看，就应该马上来看的书。这本书可以说是拯救了人类。至少拯救过我。我上面写的内容大都在书中有了介绍，但是本质还是我读书的心得。是二手的。书中内容比这些要精辟的多。怎么样,是不是已经有了阅读的欲望呢？ 这本书有点美中不足的地方，其中很多使用了程序的比喻，程序员或者理工科学生很容易懂，但是文科同学不一定有兴趣阅读。很遗憾。这本书的知识范畴超越的文理，但是阅读的兴趣也是在阅读中很重要的因素。说了这么多，如果屏幕前的你都没有尝试一下。我会很遗憾的:(]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>看书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拾遗录1234合集]]></title>
    <url>%2F2017%2F02%2F26%2F%E6%8B%BE%E9%81%97%E5%BD%951234%E5%90%88%E9%9B%86%2F</url>
    <content type="text"><![CDATA[（写在前面）如果你不是很无聊现在走还来的及。如果你没有什么事做，正好想读点什么。那么我建议你看看名著之类的。比如豆瓣上有许多有用的书单。你就这么无聊吗？还要继续读下去？…………那们好吧。来看看我要写些什么。我准备整理我以前的时候写过的文字。于是我起名为“拾遗录”。或许你认识我。那么你讲很容易理解我接下来的描述。如果你陌生的朋友，那么我就好好和你说一下了。我喜欢写写诗歌，文章什么的。特别是在上初中高中大学那一会。我那天翻了翻之前自己写的文字，自己都吓了一跳。我怎么是这么矫情的一个人。注意！我在初中时是这样一个形象，不爱洗头，还有一脸青春痘。平日还有点猥琐。（别人是这么说的）但是我写的文字却异常的没有这种气息。气质不是由内而外的吗？现在想想真觉得是一件有趣的事。于是我决定将我以前的文字整理一下。简单的介绍一下当时的写作背景和一些心情。还有如今我对里面一些事物的看法。这个拾遗的过程一定很有趣。一定是充满了尴尬而又温馨的过程。于是我大致的理了一下我的文字都有什么。一个精美的本子用来写古体诗的（还有点日记）。一个竖开的笔记本写现代诗的。一个小本写散文杂记的（不幸已经遗失了）。还有一部小说，和一些小说的片段。于是乎。这成了一个巨大的工程。如果你很好奇的想看，虽然可能性很小，我会稳定的输出。比如一周一到两篇之类的。…………所以还是很无聊对吧。现在走还来得及。如果你发现我写的是你有关的事，或者你知道是什么事。请千万淡定。别说出来。还有欢迎评论。：) 拾遗录（一）1234 相见欢 无题 本是兰芳幽月，会娇眸。可怜独酌空杯，万事休。 拾朝花，落眉愁，西风破，吹散多少佳人鬓凤头。 本来是“兰芳幽月”的画好月圆之时，可能会和倾心的女孩有见面的机会。后来可能什么原因没有见到，于是独酌空杯，觉得什么都没有意思。我还深深的记得我写着首词的时候，还是初中。根本还没有喝过酒。时间大概就是初二初三的样子。当时暗恋一个女生。但是真的记不清是发生什么事了。 可能就是一开始就傻傻的以为在学校之外有了可以见面的机会。结果竹篮打水一场空。我不知道，读者有没有这样的时候。一次见不到面什么的，就觉得“万事休”。可能是青春期情绪波动比较大吧。于是作业也不写了，电视也不看了，这也觉的无聊，那也觉得无趣。现在来看看我当时写的诗都是有点无事强说愁的感觉。实际情况是：我当时喜欢的人，初中四年和我说过不超过十句话。可能是那个时间段自己看的书啊，文章啊，都是这种伤秋悲春的。于是有了下面的“拾朝花”，与眉头紧锁。 结果少年还是无法排遣内心的苦闷，不觉已经西风大作，却还想到她头发被吹起来的样子。这里“西风破”肯定不是什么西风了，就是瞎写的随便一个什么风，反正我是分不清东西南北的。而且我当时还嘴硬，竟然问多少，好像有多少我担心似得。还不就是一个人。记得当时的她坐在我前面，我每天上课的时候就看到她的马尾辫。偶尔侧过头，被风吹起来，一缕鬓角随风轻动。 我生造出“鬓凤头”就是想描述这个情景。但是总的来说，诗里的“本来”可能就是自己的想象。但是我为啥用“词”这种形式来写呢？真的不记得了。说是词，但是根本没有关心平仄转韵的规律。可能“词”不过我抒情的载体。诗中没有那句直接写我喜欢别人，这比较像我曾经的风格。不过这个风格在后来的诗中越来越不明显了。可能是成长中，少了矜持的品质吧。不过现在想想，当时这首诗不过是折磨自己的低吟吧。 呵呵（苦笑） 123 虞美人 无题 梅花点水芙蓉开，伊上镜妆台，胭脂柳眉雪凝面，难道哀烨何处惨相见。 高山流水知音断，彩蝶良梦散，调琴也得泪两案，匆匆无缘却把玉折半。 要说上一首，还是有故事的诗，这首就是真的是瞎写了。其实也是我的想象。有点像闺怨词。上阙前三句什么的，大致写女子自己一个开开心心的打扮好自己姣好的容颜。什么“梅花”、“芙蓉”、“胭脂”这些意象都是写女子美丽容貌和品格的。额。好吧。这样分析有点像我们做了好久的语文的诗词鉴赏题，哈哈哈。其实就是美丽的女子化完妆，打扮了一下。之后第四句我又生造了一个词“哀烨”。读者估计猜的出来，这是一个拟声词。说女子内心难受想哭却哭不出，哽咽又叹气的声音。哈哈。当时我真是有意思啊。这是一种什么声音啊？估计我没听过是纯想象的。 后面的就很好理解了。就像高山流水的知音不在了，梁祝的彩蝶也不能双飞。自己一个人拨弄琴弦，想想昨日种种，今日只有自己一个人。“守着窗儿，独自怎生的黑”。在案边不禁暗自流泪。只能感慨上天定下的人和人之间的缘分是有限的，只是我和你相处的时日太短，一切都太快了，来不及闪躲，只能安慰自己“匆匆无缘”了。可见她是绝望的，但是却又是有希望的。一块玉，变成两半，你一半我一半。 真想象不出，初中生写这样的诗句做什么。可能是那个年纪，发觉爱情悲剧的必然性，和在对悲剧中挣扎女性的思考。可能向往那样的情感，也可能暗示自己求不得的心态。甚至可能就是哪次我和倾心的女生什么东西正好被分了两部分，正好有我一份有她一份，然后我意淫写出来的精神胜利诗。 这首诗一样没有说什么喜欢啊之类的。不过我当时把那个人的名字藏在了诗里。也算我比较大胆吧！ to：读者，元宵快乐 拾遗录(二)在最后的时间献给情人节123 苏幕遮 无题 龙香烬,烧粉语,青鸟快书,醉恨相思雨.庭外咋然故里曲,枉然幽怅,苦忆鸳鸯侣. 子规栖,丁香月,熏衣正浓,冥冥若相许.香兰谢娘桥边落,红字帖得,各自心中喜. 似乎从这首词开始,我便尝试使用各种意象和典故.所以解释起来可能有点麻烦。因为其中使用的典故出处我自己都已经忘记了，不过我会努力还原我词中的思想. 这仍然是我的想象诗,似乎在那个年纪我总是充满了各种各样的幻想,也许这就是所谓的中二吧。上阙描写的是一对情侣分开后在家中为对方写情书的情境。这里可能大家不太理解,既然是情侣,是互相喜欢的人，为什么还要写情书呢?平日里你侬我侬的已经够了,写情书做什么呢?这里请读者原谅我,原因是当时我以为情侣之间才会写哪种风花雪月的话，情人之间如何交流都是靠我凭空的想象。所以不免诗词中闹了笑话。便写出了这么一对肉麻的情侣。今天正好是情人节，我们不妨来看看。 烧了一晚上的香,都快烧完了,不知道烧了多少张我写的”粉语”,我觉得对你有千言万语,可是落到纸上却不知道怎么去下笔。写这个也觉得不对,写那个也觉得不好,哎呀！有没有一只可以通天的神鸟帮我问问,写什么才能让她开心。 “青鸟”古时认为的神鸟,可以和天通信,又是古时皇帝祈雨的神兽,这里我显然是认为它也可以帮我问问别人的心意。不知道你有没有这样的时候，想写点什么但是就是不知道怎么下笔。从而有了希望知道读你文字的人怎么想的心理。此处即是我笔下情侣的矫情又是我当时的真实感受。有的时候苦苦想了一个晚上,结果一看,还不是那么几句.“我想你”云云。就在这时下起了雨来。”醉恨相思雨”也可做”最恨相似语”。明明觉得有许多话诉说,结果到头来还是那么几句。愁自己真是没用。 夜尽天明,外面人们开始了一天的活动,响起了故里的音乐。顿时积攒了一夜的疲惫涌上手来，笔也握不住了,索性瘫在椅子上,独自哀声叹气,开始想想我们在一起开心的时候了。 上阙痛苦但是痛苦中却带着甜蜜,下阙两个人各自带着写好的信在相约的地点见面了。 鸟儿都睡了,一切安静恬谧。月光伴着花香。我们彼此都确定了这份缘天生注定，于是感叹这是”冥冥若相许”。但是见面的时间并不长,怎么见得呢?继续往下看。这里我用了一个电影式的描写手法。镜头一转，香兰花的花瓣从树上落下,缓缓飘过谢娘桥。(此处有典,已经忘了)此时两个人短暂的相聚已经结束了。结果如何呢？收到了情书,在各种心中都很开心。 这里我写的肯定不是现代的爱情。因为这对情侣,明明已经互相喜欢确定心意,却还小心翼翼。而且似乎是地下恋情还偷偷摸摸的,还在晚上幽会。幽会就幽会吧，结果匆匆相间又匆匆离别,只留下书信就分开了。可能是年龄小,也可能是父母家里不同意。现在在来看”红字帖”可不可能是暗示求婚呢?”喜”字似乎也表明我曾经想这样写过。这是我写这类情情爱爱的诗词的时候,少有的快乐的结尾。说不定诗中世界那对情侣有一个好的结局。 哈哈看来这样的诗,真适合在情人节“拾遗”呢。那祝今日的有情男女”红字帖得,各自心中喜”。 拾遗录(三)仙剑诗两首 我在高中的时候玩过一款电子游戏,仙剑奇侠传。相信不少人都玩过。当时每周周一到周四上学玩不上电脑,周天又得明天早起。于是都是周五和周六的晚上偷偷的在楼上玩。好几次看剧情打boss结果一回过神就早上3点了。所以第二天也就下午1点起床了。这是我的一个毛病，我曾经看某材料说明人一天最佳睡眠是8个小时(现在想想睡那么久干嘛~~)于是就会放心的睡了。 游戏剧情很好,可惜是悲剧。我记得我玩到中途的时候电脑坏了,无奈重新安装系统,游戏的存档都没有了。后来我又重新玩了一遍,一直打到结局。结果后悔我玩到结局了。 诗写的很烂,一个词,一个长诗,不想解说了.看看得了(玩过的小伙伴可以说说这是仙剑几的故事)。123 蝶恋花 无题 青眉秀目多情郎,若羁若癫,懵懂尘世间,那知生死天注定,相守碑旁忆当年. 玲珑娇柔多舛女,心生问道,寥寥命已牵,亡前与君痴言语,只羡鸳鸯不羡仙. 123456789101112131415161718 剑仙启梦录 青鸾峰上痴情郎, 悲目白雪守碑旁, 多少风尘叹事中, 只原一遇溪洞中, 玩伴好似旧相识, 茫茫凄凄求仙路, 太平村中引人厌, 无奈漂泊野外中, 无意誓言终生定, 好若相许冥冥间, 柳家有女深闺中, 心事浮沉心无主, 本为恩人报情意, 随着命动昆仑颠, 昆仑仙山琼露多, 一拜师叔紫英落, 平日放荡无人懂, 侠义人世正与恶, 月剑同鸣日剑出, 玄妙逍遥识故人, 义结金兰破俗定, 从此为兄劳奔波, 终得三宝故人出, 阴差阳错苦自责, 梦柳离花羞涩语, 语过之后人辞去, 从此不见花颜开, 只因人妖两不和, 为得红颜登天梯, 斩龙入境取影枝, 先入天楼取天弓, 后如幻冥明月中, 相逢时日不相依, 可怜浮华自恨生, 人妖何必残相对, 今世做人明为妖, 然后匆匆惨相别, 自梦幻合柳梦璃, 多少情仇剑影中, 不如重归山上时, 回梦仙游少年行, 多少情仇多少痛, 可怜相逢时日短, 无奈离人以做古, 生时憾然相许愿, 此生尽欢死无憾, 此生与汝永相伴, 青鸾峰上又来风, 相聚已是千年迟, 曾经欢笑不剩在, 只当人生幻梦间。 祝读者,晚安好梦. 拾遗录(四)模仿的练习诗 (下面两段可以不读) 首先这个是高中写的不是我现在写的。其次我在整理的时候发现我的诗竟然大部分写情爱这类的，这使我很苦恼。我都都惊讶于当初都写的些什么玩意儿,好在不是所有的诗和文章写的都是写男女之情的。其实就算是有,也不是特定发了什么事为了谁才写的。虽然因为遇见了什么事才写的诗占我写古体诗的比例还不小。 我本意也不是先整理古体诗然后再整理现代诗小说什么的。而是我现在身在重庆上班,现代诗的小册子和小说都放在了家中。无奈只能整理写过的古体诗。其实古体诗不是我偏爱的题材，受我个人能力所限制,诗中的形象往往重复而不贴近生活。不贴近生活就很难有打动人心的诗句。所以大部分诗是古体的抒情诗,而且往往又是以女性的视角写的闺怨题材。这就有点无事强说愁的嫌疑。（我又不是女的又没有闺怨）而后期由于我对诗词的喜爱，还时不时的写了一些练习的诗词,刻意的使用一些手法和修辞,或者模仿一种意境和语言风格。 当时高中的一个假期在家看红楼梦电视剧,对林黛玉这个角色很有感。记得那是87版的第30几集(这个真的想不起来了).宝玉在外险些遇险,被救回来后开心的去潇湘馆找林妹妹,可是这个时候林妹妹已经不在了。看到林妹妹走的时候并没有哭。宝玉兴高采烈的喊这林妹妹的名字,突然发现她不在了,于是宝玉眼神都呆了,他环顾四周一切陈设安好如初只是人不在了……他又说了一遍“林~妹~妹~” 画面停止了,响起了片尾曲.突然泪就不争气的落下来,怎么也控制不住了……. 后来又连续的哭了三集。 说这些是和这首诗有点关系,黛玉有葬花,于是我写了一首弄花.如今读起发现狗屁不通！名字都没有取好，花岂是能把玩的。意境很弱,词语堆砌的有很多。画面跳脱,我的语文老师要是看到了还不得笑脱了(就是嘲笑到要晕过去,这个也是我自己造的词). 123456789101112 弄花吟 春来醒水百花显, 英飞纷纷斗香艳. 一朵开似胜一朵, 当年花魁已不见. 为何风过馨已无, 为何椮椮无人读. 只见年年水向前, 忘却蒙蒙向少年, 独采花苞藏花瓣, 自伤别离一两面, 无端春雨绵绵飞, 静坐花亭往事追, 追忆不成两行泪, 才下花语诗已醉, 轻拦一筐去梦乡, 风化雪月在边疆, 多少今丝妄楼兰, 倚柱桃落断黄粱, 百芳易赏不宜葬, 葬伊销得故人神, 回眸忘川春雨细, 梦醒时分念一人. 椮椮(sen)这里的用法是错的。我忘了是谁在那里用过,不过意思似乎不对,不用查字典了！这里我错了。你可一理解成”惨惨”二字。 古人用意相:香草美人, 是政治诗。是写怀才不遇。我写香草美人就是为了写美人。哈哈哈哈……. 肤浅至此不敢多言. 博客转到这里 没有人可以评论了。我估计也没多少人看了吧。哈哈哈~~如此甚好。]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>拾遗录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2017%2F02%2F26%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[这一次 终于是 施工完毕了一些东西 我决定写博客，使用这种老土的方法来记录我的生活和思想。可能有人已经认识了我。可能有人还不认识我。没关系，我会自我介绍的。 关于我： 姓名: 黄油香蕉君(butter Banana bacterial) 性别: male 出生日期: 1993.9 职业: 魔法师:p（wizard） 我出生于黑龙江省大庆市的一个很普通的家庭，有一位双胞胎的哥哥。高中就读于当地最好的实验中学，那时的我害羞腼腆，还有一脸的青春痘。后来考入了重庆邮电大学。就读信息工程专业。在上大学的假期开始自学C语言编程，于是迷上了编程。在大学期间参加了辩论队。后来又自学了很多的语言，比如java，c#，php，python，matlab等等。现在已经工作了。主要使用的语言是php和java。最想学会的语言是js和lisp。这样我就可以成为一名合格的魔法师了，哈哈哈哈。我最近在看有关机器学习有关的知识。虽然工作了但是不想停止学习有趣的东西。所以你觉得我是一个标准的理科宅男？这个博客中都是技术分享？不你错了。我喜欢文学和艺术。在高考前我完成了人生中第二部小说（第一部没有完成，而且是初中写的，好幼稚啊QAQ！）我喜欢音乐喜欢唱歌，但是无奈唱的很难听。我喜欢美术很喜欢画画，现在偶尔也会画一画，不过这和我工作无关。我喜欢运动喜欢打篮球，但是大学中缺少锻炼体力已经不行了。我喜欢围棋，那是中国献给人类和机器最有意思的游戏。我喜欢玩我的世界，喜欢破坏和创作的简单真理。所以我博客的内容有： 博客的内容：技术分享 就是我平时遇到的一些问题。和解决方案 要不就是我为了装X学的技术然后怕忘记了就记了下来 我的一些有趣的，或者你觉得很无趣的技术上的设想 我重读《高数》《大物》等书的读书笔记等 读书笔记 我看书的心得或笔记 图书推荐 和 推荐他们的原因 随笔文章 闲来无事写的文章或者诗句 对时事新闻的看法 电影或者电视剧的推荐或者看法 我对b站up主的推荐和看法 我喜欢的歌的推荐 我为外语歌写的中文歌词 游戏那些事 我玩mc的一些心得和记录 我的信仰 没有什么语言是 世界上最好的语言 emacs 是世界上最好的编辑器 而spacemacs是个不错的配置 如果你要和我提vim。很好！我用vim的编辑模式 不要骂国足！我相信他们行~ 如果人心是善良通透的，那么沟通可以解决一切的问题。如果不是，别放弃。]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>自我介绍</tag>
      </tags>
  </entry>
</search>